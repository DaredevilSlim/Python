#!/usr/bin/env python3

import sys

# Глава 1.
# 1.6 Вывод результатов работы программы.

# print() - функция преобразует объект в строку и посылает его в стандартный вывод stdout.
print('Привет, Мир!')

# Если необходимо результат вывести на той же строке, то в функции print() данные указываются через запятую первом параметре.
print('Строка 1', 'Строка 2')

# С помощью параметра sep можно указать другой символ, например дефис с пробелами.
print('Строка 3', 'Строка 4', sep=' - ')

# С помощью параметра end можно заменить символ окончания строки, на любой из доступных и продолжить вывод на той же строке. Например символом пробела.
print('Строка 5', 'Строка 6', end=' ')
print('Строка 7')

# Для вывода нескольких строк текста, их следует указать в тройных кавычках
print('''Строка 8
Строка 9
Строка 10''')

# Для вывода результатов работы вместо print() можно использовать метод write() объекта sys.stdout:
# import sys - Подключение модуля sys(должно быть в начале файла)
sys.stdout.write('Строка 11\n')  # Выводим строку, где \n символ превода строки
sys.stdout.write('Строка 12\n')


# 1.7 Вывод данных.

# Для ввода данных предназначена функция input(), которая получает данные со стандартного ввода stdin.
# Функция имеет следующий формат:
# [<Значение> =  ] input([<Сообщение>])
# name = input("Введите ваше имя: ")
# print("Привет,", name)x
# input("Нажмите <Enter> для закрытия окна")


# 1.8 Доступ к документации.

# help() -  функция для отображения документации.
# С помощью help() можно получить документацию не только по конкретной функции, но и по всему модулю сразу. Для этого предварительно этот модуль необходимо подключить.
# import builtins
# help(builtins)

# dir() - функция позволяет получить список всех идентификаторов в модуле.
# print(dir(builtins))


# Глава 2.
# Переменные.
# 2.1 Именование переменных.
# Получение списка ключевых слов, которые нельзя использовать в качестве имён переменных
# import keyword
# keyword.kwlist
# Список ключевых слов:
# ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']


# 2.2 Типы данных.
# bool - логический тип данных. Может содержать значение True и False, которые ведут себя как числа 1 и 0 соответственно:
type(True), type(False)
int(True), int(False)

# NoneType - объект со значением None(обозначает отсутствие значения):
type(None)
# В логическом контексте значение None интерпритируется как False:
bool(None)

# int - целые числа. Размер числа ограничен лишь объёмом оперативной памяти.
type(2147483647)

# float - вещественные числа, числа с плавающей точкой.
type(5.1)

# complex - комплексные числа.
type(2 + 2j)

# str - Unicode - строки.
type('Строка')

# bytes - неизменяемая последовательность байтов.
type(bytes('Строка', 'utf-8'))

# bytearray - изменяемая последовательность байтов.
type(bytearray('Строка', 'utf-8'))

# list - списки. Аналогичен массивам в других языках программирования.
type([1, 2, 3])

# tuple - кортежи.
type((1, 2, 3))

# dict - словари. Аналогичен ассоциативным массивам в других языках программирования.
type({'x': 5, 'y': 20})

# set - множества(коллекции уникальных объектов).
type({'a', 'b', 'c'})

# frozenset - неизменяемые множества.
type(frozenset(['a', 'b', 'c']))

# ellipsis - обозначается в виде трёх точек или слова Ellipsis. Используется в расширенном синтаксисе получения среза.
type(...), ..., ... is Ellipsis
# class C(): def__getitem__(self, obj): return obj
# c = C()
# c[..., 1: 5, 0: 9: 1, 0]

# function - функции.
def func():
    pass
type(func)

# module - модули.
type(sys)

# type - классы и типы данных.
class C:
    pass
type(C)
type(type(''))

# Основные типы данных деляться на изменяемые и неизменяемые.
# К изменяемым относятся списки, словари и тип bytearray.
arr = [1, 2, 3]
arr[0] = 0
print(arr)

# К неизменяемым относятся числа, строки, кортежи и тип bytes.
str1 = 'авто'
str2 = 'транспорт'
str3 = str1 + str2
print(str3)

# Кроме того, типы данных деляться на последовательности и отображения.
# К последовательностям относятся строки, списки, кортежи, типы bytes и bytearray.
# К отображениям относятся словари.
# Последовательности и отображения поддерживают механизм итераторов, позволяющий произвести обход всех элементов с помощью метода __next__() или функции next().
arr = [1, 2]
i = iter(arr)
i.__next__()      # Метод __next__()
next(i)           # Функция next()

# Если используется словарь, то на каждой итерации возвращается ключ.
d = {'x': 1, 'y': 2}
i = iter(d)
i.__next__()      # Возвращается ключ
d[i.__next__()]   # Получаем значение по ключу

# for - цикл, который использует механизм итераторов незаметно для нас.
# Вывод элементов списка.
for i in [1, 2, 3, 4, 5]:
    print(i)

# Перебор слова по буквам.
for i in 'Строка':
    print(i + ' -', end=' ')

# Пример перебора словаря.
d = {'x': 1, 'y': 2, 'z': 3}
for key in d:
    print(d[key])


# 2.3 Присваивание значения переменным.
# Динамическая типизация - при присвоении переменной значения интерпритатор автоматически относит переменную к одному из типов данных.
x = 7              # Тип int
y = 7.8            # Тип float
s1 = "Строка"      # Переменной s1 присвоено значение Строка
s2 = 'Строка'      # Переменной s2 также присвоено значение Строка
b = True           # Переменной b присвоено логическое значение True
x = y = 10         # Перменной x как и переменной y присвоено значение 10

# После присваивания значения в переменной сохраняется ссылка на объект, а не сам объект. Следует учитывать при групповом присваивании. Групповое присваивание можно использовать для чисел, строк и кортежей, но для изменяемых объектов этого делать незьзя.

# is - оператор позволяет проверить ссылаются ли две переменные на один и тот же объект.
x = y = [1, 2]             # Один объект
x is y                     # True
x = [1, 2]; y = [1, 2]     # Разные объекты
x is y                     # False

# Посмотреть количество ссылок на объект позволяет метод getrefcount() из модуля sys.
sys.getrefcount(2)

# Позиционное присваивание. Переменные указываются через запятую слева от оператора =, а значения через запятую справа.
x, y, z = 1, 2, 3

# При помощи позиционного присваивания можно поменять значения переменных местами.
x, y = 1, 2
x, y = y, x       # Значения поменяны местами

# По обе стороны оператора = могут быть указаны последовательности. К последовательностям относятся строки, списки, кортежи, типы bytes и bytearray. Количество элементов справа и слева должно совпадать.
x, y, z = '123'          # Строка
x, y, z = [1, 2, 3]      # Список
x, y, z = (1, 2, 3)      # Кортеж
[x, y, z] = (1, 2, 3)    # Список слева, кортеж справа

# Для сохранения в переменной списка, состоящего из лишних элементов, при несоответствии количества элементов справа и слева от оператора = перед именем переменной указывается звёздочка (*). Переменная,  перед которой указана звёздочка, всегда содержит список. Если для этой переменной не хватает значений,  тогда ей присваиватся пустой список. Звёздочку можно указать только перед одной переменной.
x, y, *z = (1, 2, 3, 4)    # (1, 2, [3, 4])
x, *y, z = (1, 2, 3, 4)    # (1, [2, 3], 4)
*x, y, z = (1, 2, 3, 4)    # ([1, 2], 3, 4)
x, y, *z = (1, 2, 3)       # (1, 2, [3])
x, y, *z = (1, 2)          # (1, 2, [])


# 2.4 Проверка типа данных.
# Определить на какой тип данных ссылается переменная позволяет функция type(<Имя переменной>):
type(x)                    # int

# Проверка типа переменной.
# Сравнить значение, возвращаемое функцией type(), с названием типа данных:
x = 10
if type(x) == int:
    print('Это тип int')

# Проверить тип с помощью функции isinstance():
s = 'Строка'
if isinstance(s, str):
    print('Это тип str')


# 2.5 Преобразование типов данных.
# Для преобразования типов данных предназначены следующие функции:
# bool([<Объект>]) - преобразует объект в логический тип данных.
bool(0), bool(1), bool(''), bool('Строка')      # (False, True, False, True)

# int([<Объект>]) - преобразует объект в число. Во втором параметре можно указать систему счисления.
int(7.5), int('71')                                            # (7, 71)
int('71',  10), int('71', 8), int('0o71', 8), int('A', 16)     # (71, 57, 57, 10)

# float([<Число или строка>]) - преобразует целое число или строку в вещественное число.
float(7), float('7.1')                    # (7.0, 7.1)
float('Infinity'), float('-inf')          # (inf, -inf)
float('Infinity') + float('-inf')         # nan

# str([<Объект>]) - преобразует объект в строку.
str(125), str([1, 2, 3])                  # ('125', '[1, 2, 3]')
str((1, 2, 3)), str({'x': 5, 'y': 10})    # ('(1, 2, 3)', '{'x': 5, 'y': 10}')
str(bytes('Строка', 'utf-8'))             # "b'\\xd0\\xa1\\xd1\\x82\\xd1\\x80\\xd0\\xbe\\xd0\\xba\\xd0\\xb0'"
str(bytearray('Строка', 'utf-8'))         # "bytearray(b'\\xd0\\xa1\\xd1\\x82\\xd1\\x80\\xd0\\xbe\\xd0\\xba\\xd0\\xb0')"

# str(<Объект>[, <Кодировка>[, <Обработка ошибок>]]) - преобразует объект типа bytes или bytearray в строку. В третьем параметре могут быть указаны значения 'strict'(значение по умолчанию,  в случае ошибки возникает исключение UnicodeDecodeError), 'replace'(неизвестный символ заменяется символом, имеющий код \uFFFD) или 'ignore'(неизвестные символы игнорируются).
obj1 = bytes('Строка 1', 'utf-8')
obj2 = bytes('Строка 2', 'utf-8')
str(obj1, 'utf-8'), str(obj2, 'utf-8')    # ('Строка 1', 'Строка 2')
str(obj1, 'ascii', 'strict')              # Traceback (most recent call last): File "<stdin>", line 1, in <module> UnicodeDecodeError: 'ascii' codec can't decode byte 0xd0 in position 0: ordinal not in range(128)
str(obj1, 'ascii', 'ignore')              # ' 1'

# bytes(<Строка>, <Кодировка>[, <Обработка ошибок>]) - преобразует строку в объект типа bytes. В третьем параметре могут быть указаны значения 'strict'(значение по умолчанию), 'replace' или 'ignore'.
bytes('Строка', 'cp1251')                 # b'\xd1\xf2\xf0\xee\xea\xe0'
bytes('Строка 123', 'ascii', 'ignore')    # b' 123'

# bytes(<Последовательность>) - преобразует последовательность целых чисел от 0 до 255 в объект типа bytes. Если число не попадает в диапазон, то возникает исключение ValueError.
b = bytes([225, 226, 224, 174, 170, 160]); b          # b'\xe1\xe2\xe0\xae\xaa\xa0'
str(b, 'cp866')                                       # 'строка'

# bytearray(<Строка>, <Кодировка>[, <Обработка ошибок>]) - преобразует строку в объект типа bytearray. В третьем параметре могут быть указаны значения 'strict'(значение по умолчанию), 'replace' или 'ignore'.
bytearray('Строка', 'cp1251')             # bytearray(b'\xd1\xf2\xf0\xee\xea\xe0')

# bytearray(<Последовательность>) - преобразует последовательность целых чисел от 0 до 255 в объект типа bytearray. Если число не попадает в диапазон, то возникает исключение ValueError.
b = bytearray([225, 226, 224, 174, 170, 160]); b      # bytearray(b'\xe1\xe2\xe0\xae\xaa\xa0')
str(b, 'cp866')                                       # 'строка'

# list(<Последовательность>) - преобразует элементы последовательности в список.
list('12345')                             # ['1', '2', '3', '4', '5'] - преобразование строки
list((1, 2, 3, 4, 5, 6))                  # [1, 2, 3, 4, 5, 6] - преобразование кортежа

# tuple(<Последовательность>) - преобразует элементы последовательности в кортеж.
tuple('123456')                           # ('1', '2', '3', '4', '5') - преобразование строки
tuple([1, 2, 3, 4, 5, 6])                 # (1, 2, 3, 4, 5, 6) - преобразование списка


# 2.6 Удаление переменной.
# Удалить переменную можно с помощью инструкции del:
# del <Переменная 1> [, ..., <Переменная N>]
x = 10; x      # 10
del x; x       # Traceback (most recent call last): File "<stdin>", line 1, in <module> NameError: name 'x' is not defined
x, y = 10, 20
del x, y


48
