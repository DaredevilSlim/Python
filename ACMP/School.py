#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# http://acmp.ru
# https://www.youtube.com/channel/UCM01TVLxMvqEXq4Z9AFl-jA/videos


# ЗАДАЧА №11 - Зайчик(Не решена)
# В нашем зоопарке появился заяц. Его поместили в клетку, и чтобы ему не было скучно, директор зоопарка распорядился
# поставить в его клетке лесенку. Теперь наш зайчик может прыгать по лесенке вверх, перепрыгивая через ступеньки.
# Лестница имеет определенное количество ступенек N. Заяц может одним прыжком преодолеть не более К ступенек. Для
# разнообразия зайчик пытается каждый раз найти новый путь к вершине лестницы. Директору любопытно, сколько различных
# способов есть у зайца добраться до вершины лестницы при заданных значениях K и N. Помогите директору написать
# программу, которая поможет вычислить это количество. Например, если K=3 и N=4, то существуют следующие маршруты:
# 1+1+1+1, 1+1+2, 1+2+1, 2+1+1, 2+2, 1+3, 3+1. Т.е. при данных значениях у зайца всего 7 различных маршрутов добраться
# до вершины лестницы.
# Входные данные - В единственной строке входного файла INPUT.TXT записаны два натуральных числа K и N(1 ≤ K ≤ N ≤ 300).
# К - максимальное количество ступенек, которое может преодолеть заяц одним прыжком, N – общее число ступенек лестницы.
# Выходные данные - В единственную строку выходного файла OUTPUT.TXT нужно вывести количество возможных вариантов
# различных маршрутов зайца на верхнюю ступеньку лестницы без ведущих нулей.
max_jump, n = map(int, input().split())
count_jump = [1, 1] + [0] * (1 + n - 2)
for i in range(2, max_jump + 1):
    count_jump[i] = count_jump[i - 1] * 2
for i in range(max_jump + 1, n + 1):
    count_jump[i] = count_jump[i - 1] * 2 - count_jump[i - 1 - max_jump]
print(max(count_jump))

# ЗАДАЧА №12 - Дачники(Не решена)
# Всем известно, что дачники – народ странный, почти такой же, как и программисты. Строят они свои дачи непонятно где,
# да и выращивают там непонятно что и непонятно зачем. А уж как они туда добираются, это другая история: кто на
# автобусе, кто на электричке, кто на автомобиле, ну а кто-то вовсе пешком ходит от дома и до самого участка. Так что не
# стоит удивляться, если вдруг Вы узнаете, что некое садоводческое товарищество располагается на острове, а дачники
# добираются до него самолетом. Да еще и на этом острове может не быть посадочной полосы, так что высадиться на остров
# можно, только прыгая с парашютом (мы уж не рассматриваем то, как они возвращаются с дач домой). Рассмотрим этот
# уникальный случай. Пилот всегда старается осуществить высадку парашютистов таким образом, чтобы дачники приземлялись
# как можно ближе к своим прямоугольным участкам. Пилоту интересно знать: сколько дачников приземлится на свои участки?
# Помогите ему решить эту задачу!
# Входные данные - В первой строке входного файла INPUT.TXT записано натуральное число N (1 ≤ N ≤ 1000) – количество
# дачников, далее идут N строк, в каждой из которых описаны координаты каждого дачника и его участка:
# X Y X1 Y1 X2 Y2 X3 Y3 X4 Y4
# где
# (X,Y) – координаты приземления парашютиста
# (X1, Y1, X2, Y2, X3, Y3, X4,Y4) – координаты прямоугольного участка на плоскости, указанные последовательно.
# Все координаты – целые числа, не превышающие 50000 по абсолютной величине
# Выходные данные - В выходной файл OUTPUT.TXT нужно вывести количество дачников, приземлившихся на свой участок.
# Попадание на границу участка считается попаданием на участок.
jumpers = int(input())
coordinates = []
while jumpers != 0:
    coordinates.append(list(map(int, input().split())))
    jumpers -= 1
print(coordinates)


# ЗАДАЧА №16 - Лесенка(Не решена)
# Лесенкой называется набор кубиков, в котором каждый более верхний слой содержит кубиков меньше, чем предыдущий.
# Требуется написать программу, вычисляющую число лесенок, которое можно построить из N кубиков.
# Входные данные - Во входном файле INPUT.TXT записано натуральное число N (1 ≤ N ≤ 100) – количество кубиков в лесенке.
# Выходные данные - В выходной файл OUTPUT.TXT необходимо вывести число лесенок, которые можно построить из N кубиков.


# ЗАДАЧА №17 - Поле чудес(Не решена)
# Для игры в «Поле чудес» используется круглый барабан, разделенный на сектора, и стрелка. В каждом секторе записано
# некоторое число. В различных секторах может быть записано одно и то же число. Однажды ведущий игры решил изменить
# правила. Он сам стал вращать барабан и называть игроку (который барабана не видел) все числа подряд в том порядке, в
# котором на них указывала стрелка в процессе вращения барабана. Получилось так, что барабан сделал целое число
# оборотов, то есть последний сектор совпал с первым. После этого, ведущий задал участнику вопрос: какое наименьшее
# число секторов может быть на барабане? Требуется написать программу, отвечающую на этот вопрос ведущего.
# Входные данные - В первой строке входного файла INPUT.TXT записано число N – количество чисел, которое назвал ведущий
# (2 ≤ N ≤ 30000). Во второй строке записано N чисел, на которые указывала стрелка в процессе вращения барабана. Первое
# число всегда совпадает с последним (в конце стрелка указывает на тот же сектор, что и в начале). Числа, записанные в
# секторах барабана – натуральные, не превышающие 32000.
# Выходные данные - В выходной файл OUTPUT.TXT необходимо вывести одно число – минимальное число секторов, которое может
# быть на барабане.


# ЗАДАЧА №28 - Симметрия(Не решена)
# Многие из вас, вероятно, знакомы с понятием симметрии относительно прямой. Пусть на плоскости расположена прямая L и
# точка A. Точка B называется симметричной точке A относительно прямой L, если отрезок АВ перпендикулярен прямой L и
# делится пополам точкой пересечения с ней. В частности, если точка А лежит на прямой L, то точка B совпадает с
# точкой А.
# Задана прямая L, параллельная одной из осей координат, и точка А. Найдите точку В, симметричную А относительно L.
# Входные данные - Первая строка входного файла INPUT.TXT содержит 4 числа: x1, y1, x2, y2 – координаты двух различных
# точек, через которые проходит прямая L. Вторая строка входного файла содержит 2 числа xA и yA – координаты точки А.
# Все числа во входном файле целые и не превосходят 108 по модулю.
# Выходные данные - В выходной файл OUTPUT.TXT выведите числа xB и yB – координаты точки B.


# ЗАДАЧА №642 - Кризисный бизнес(Не решена)
# Петр Васильевич Колошин никогда не был пугливым человеком и всегда отличался спокойствием и прозорливостью, особенно в
# сфере мировых политических и экономических процессов. Однако, не смотря ни на что, Петр Васильевича очень недооценил
# последствия мирового финансового кризиса и как следствие был уволен пару недель назад с должности сетевого
# администратора одной большой и серьезной организации.
# Не смотря ни на что, Петр Васильевич не отчаялся и решил начать свое дело. Тщательно проанализировав бизнес-климат в
# своем регионе, Петр Васильевич пришел к выводу, что наиболее целесообразным будет открыть новый таксопарк. Первое с
# чего решил начать новоиспеченный бизнесмен – это закупить автомобили. За все время работы Петр Васильевичу удалось
# накопить сумму S, которую он готов потратить на закупку машин.
# В городе, в котором живет Петр Васильевич, есть только один автосалон. Известно, что в этом автосалоне выставлено на
# продажу N автомобилей, причем установлено, что стоимость i-го автомобиля равняется Ai. Вашей задачей является помочь
# еще неопытному бизнесмену Петр Васильевичу приобрести максимальное количество автомобилей, потратив сумму не более S.
# Входные данные - В первой строке входного файла INPUT.TXT находится два целых положительных числа разделенные
# одиночным пробелом – это числа N( 1 ≤ N ≤ 100) и S ( 1 ≤ S ≤ 109) соответственно.
# Вторая строка содержит ровно N чисел Ai (1 ≤ Ai ≤ 109) , которые описывают стоимость соответствующих автомобилей. Все
# числа в строке разделены одиночными пробелами.
# Выходные данные - В выходной файл OUTPUT.TXT выведите одно целое число – максимальное количество автомобилей, которые
# сможет приобрести Петр Иванович на сумму не более чем S.


# ЗАДАЧА №756 - Рыболовная сеть(Не решена)
# Браконьер Петрович использует распространенный незаконный способ рыбалки с использованием рыболовной сети. Но проблема
# в том, что крупная рыба часто рвет сеть и приходится ее восстанавливать. Однажды Петрович задумался: какое
# максимальное количество повреждений может быть в рыболовной сети, таких, что сеть не будет разорвана на части? Вам
# предстоит помочь ему в вычислениях.
# Сеть имеет прямоугольную форму размером M×N узлов, все смежные узлы соединены леской. Под разрывом будем понимать
# только единичный обрыв лески между двумя смежными узлами сети.
# Например, если сеть имеет размер 2х2, то внешний вид сети будет напоминать квадрат, где допустим только один разрыв в
# одном из четырех возможных соединений, т.к. любые 2 разрыва приведут к разделению сети на 2 части.
# Входные данные - Входной файл INPUT.TXT содержит два целых числа M и N – размеры рыболовной сети (1 ≤ M, N ≤ 10 000).
# Выходные данные - В выходной файл OUTPUT.TXT выведите максимальное число разрывов заданной сети, которые не приведут к
# распадению рыболовной снасти Петровича.


# ЗАДАЧА №763 - Игра с ладьей
# На бесконечной вправо и вверх шахматной доске находится ладья. Два игрока передвигают ее по очереди. За один ход
# разрешено сдвинуть ладью вниз или влево на произвольное (ненулевое) количество клеток так, чтобы ладья не покинула
# доску. Цель игры – переместить ладью в левый нижний угол, то есть клетку с координатами (1,1). Известно, что оба
# игрока придерживаются оптимальной стратегии. Игрок №1 ходит первым, при этом он обязан совершить хотя бы один ход.
# Если первый ход сделать нельзя, то определить победителя также невозможно. Требуется написать программу, которая
# найдет номер победившего игрока, либо определит, что этого сделать нельзя.
# Входные данные - Входной файл INPUT.TXT содержит два натуральных числа, разделенных пробелами: X и Y – координаты
# ладьи перед первым ходом (X,Y ≤ 109).
# Выходные данные - В выходной файл OUTPUT.TXT выведите одно число – номер победившего игрока. Если победителя
# определить невозможно, то следует вывести 0.


# ЗАДАЧА №943 - Змейка - 3(Не решена)
# Напишите программу, которая выводит элемент из строки Y и столбца X матрицы размера N×M, которая заполнена следующим
# образом:
# 0 1   2   3
# 7	6	5	4
# 8	9	10	11
# Входные данные - Входной файл INPUT.TXT содержит натуральные числа N, M, Y, X (Y ≤ N ≤ 50; X ≤ M ≤ 50). N - количество
# строк матрицы, M - количество столбцов матрицы, Y и X - номера строки и столбца искомого элемента.
# Выходные данные - В выходной файл OUTPUT.TXT выведите искомый элемент.
n, m, y, x = map(int, input().split())
print(m * y - (x if y % 2 == 0 else m - x + 1))
# Или
n, m, y, x = map(int, input().split())
print(m * y - m + (m - x if y % 2 == 0 else x - 1))
# Или
n, m, y, x = map(int, input().split())
print(m * y - m + x - 1 if y % 2 != 0 else m * y - m + m - x)
# Или
n, m, y, x = map(int, input().split())
print(m * (y - 1) + (x - 1) if y % 2 != 0 else m * (y - 1) + (m - x))
