#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from collections.abc import Iterable

# Никола любит классифицировать все вещи. Он классифицировал ряд чисел, и в результате его усилий простая
# последовательность чисел стала глубоко вложенным списком. София и Стефан не понимают, как он организовал числа, и
# нужно выяснить, что всё это значит. Им нужна ваша помощь, чтобы понять сумасшедший список Николы.
# Существует список, который содержит целые числа или другие вложенные списки, которые могут содержать ещё несколько
# списков и целых чисел, которые затем... ну, вы поняли. Вы должны поместить все целые значения в один плоский список.
# Порядок должен быть такой же, как и в первоначальном списке, с представлением строки слева направо.
# Мы должны скрыть эту программу от Николы, сделав её маленькой и лёгкой. Поэтому ваш код должен быть короче, чем 140
# символов (с пробелами) .
# Входные данные: Вложенный список целых чисел.
# Выходные данные: Список или другой итерируемый обьект (кортеж, генератор, итератор) целых чисел.
# Примеры:
# Как это используется: Эта концепция полезна для разбора и анализа файлов со сложной структурой и она бросает вызов
# вашей креативности в написании короткого кода.
# Предусловия:
# 0 ≤ |array| ≤ 100;
# ∀ x ∈ array : -232 < x < 232 or x is a list;
# depth < 10.

def flat_list(array: list[int]) -> Iterable[int]:
    n = []
    for i in array:
        n += [i] if isinstance(i, int) else flat_list(i)
    return n


print(list(flat_list([1, 2, 3])))  # [1, 2, 3]
print(list(flat_list([1, [2, 2, 2], 4])))  # [1, 2, 2, 2, 4]
print(list(flat_list([[[2]], [4, [5, 6, [6], 6, 6, 6], 7]])))  # [2, 4, 5, 6, 6, 6, 6, 6, 7]
print(list(flat_list([-1, [1, [-2], 1], -1])))  # [-1, 1, -2, 1, -1]

