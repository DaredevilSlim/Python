#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from typing import Iterable

# Отсортируйте данный список таким образом, чтобы его элементы оказались в порядке убывания частоты их появления, то
# есть по количеству раз, которое они появляются в элементах. Если два элемента имеют одинаковую частоту, они должны
# оказаться в том же порядке, в котором стояли изначально в списке.
# Если ты хочешь больше попрактиковаться с подобным заданием, попробуй миссию Frequency Sorting.
# Входные данные: Список
# Выходные данные: Список или другой итерируемый обьект (кортеж, итератор, генератор)
# Как это используется: Для анализа данных с помощью математической статистики и математического анализа, а также для
# выявления тенденций и предсказания будущих изменений (систем, явлений и т. д.)
# Предварительное условие:
# Элементы могут быть целыми числами или строками.
# Миссия была взята из Python CCPS 109 Осень 2018. Она преподается Илккой Коккариненым в Школа непрерывного образования
# Раймонда Чанга.


def frequency_sort(items: list[str | int]) -> Iterable[str | int]:
    return items


print(list(frequency_sort([4, 6, 2, 2, 6, 4, 4, 4])))  # [4, 4, 4, 4, 6, 6, 2, 2]
print(list(frequency_sort([4, 6, 2, 2, 2, 6, 4, 4, 4])))  # [4, 4, 4, 4, 2, 2, 2, 6, 6]
print(list(frequency_sort(["bob", "bob", "carl", "alex", "bob"])))  # ["bob", "bob", "bob", "carl", "alex"]
print(list(frequency_sort([17, 99, 42])))  # [17, 99, 42]
print(list(frequency_sort([])))  # []
print(list(frequency_sort([1])))  # [1]

