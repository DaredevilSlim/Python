#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Кодирование Хафмана - жадный алгоритм оптимального префиксного кодирования, часто используемый для компрессии данных
# без потерь. Был разработан в 1952 году аспирантом Массачусетского технологического института Дэвидом Хаффманом при
# написании им курсовой работы.
# Результат работы алгоритма - таблица кодов символов переменной длины. Таблица строится на основании частоты появления
# символа в исходном тексте. Подобно другим методам вероятностного кодирования (Шеннона, префиксного), частоиспользуемые
# символы представляются кодом из меньшего числа бит, чем редкоиспользуемые символы.
# Простейший алгоритм использует очередь, где узлы (символы) с меньшей частотой появления имеют больший вес.
# Создаём узел для каждого символа и добавляем его в очередь.
# Пока в очереди более двух узлов выполняем следующее:
# - Удаляем из очереди два узла с максимальным весом (то есть минимальной частотой появления).
# - Создаём новый узел, который будет родителем для двух удалённых узлов, при этом его вес будет равен сумме весов для
# удалённых узлов
# - Добавляем новый узел в очередь.
# На этом построение дерева заканчивается. Оставшийся узел будет корнем дерева.
# Важный момент! Для нашей задачи для двух узлов с одинаковой частотой появления больший вес имеет тот, чей код символа
# меньше. То есть 'A' имеет больший вес, чем 'B', 'DZ' имеет больший вес, чем 'E'
# Маркируем соединения между узлами дерева цифрами 0 и 1 (соединение с узлом большего приоритета нулём, меньшего -
# единицей)
# Цифры по пути от корня дерева к листу будут кодом символа.
# Для нашей задачи результатом будет строка, в которой каждый исходный символ заменяется его кодом.
# Huffman_coding_visualisation
# Входные данные: строка, str.
# Выходные данные: закодированная строка, str.
# Где используется: Для компрессирования данных без потерь
# Ограничения: Входная строка максимальной длинной 32000, состоящая из символов английского алфавита и пробелов (a-z,
# A-Z, " ")
# Идея для миссии позаимствована со школьных соревнований для детей
# Изображение создано Cmglee для википедии
def huffman_encode(s: str) -> str:
    # your code here
    return ""


print(huffman_encode("BADABUM"))  # "1001110011000111"
print(huffman_encode("A DEAD DAD CEDED A BAD BABE A BEADED ABACA BED"))  # "1000011101001000110010011101100111001001000
# 111110010011111011111100010001111110100111001001011111011101000111111001"
print(huffman_encode("no devil lived on"))  # "100101111000001110010011111011010110001000111101100"
print(huffman_encode("an assassin sins"))  # "110111100110001100010111110001011110"
print(huffman_encode("aaaa"))  # "0000"
print(huffman_encode(""))  # ""
print(huffman_encode("T isnt t"))  # "01000011101100110011"
print(huffman_encode("how quickly daft jumping zebras vex"))  # "001010110110110110011111010001111111101001010101110011
# 00000011110000011001011001000101001011011100011011000010011011101000111111010000111101000111010011000110111"
print(huffman_encode("amazingly few discotheques provide jukeboxes"))  # "110010001011001110000111000111111010000101101
# 110111110010001011110111101011110111110011010001111111101000010101001001011110100100001101010010100111111011001101111
# 1110100000001001110001010011001001011"
