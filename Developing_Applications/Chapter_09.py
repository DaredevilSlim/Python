#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import copy  # Подключаем модуль copy

# ГЛАВА 9
# Словари
# Словарь - это изменяемый набор значений (элементов), каждому из которых дана уникальная пометка, называемая ключом. В
# качестве ключа может выступать произвольное значение любого типа, но практически всегда используются строки. Зная
# ключ, можно извлечь из словаря соответствующий ему элемент. Количество элементов в словаре называется размером.
# Словари, а также другие подобные им типы данных называются отображениями, поскольку в них каждый ключ отображается на
# соответствующий ему элемент.


# 9.1. Создание словаря
print('9.1. Создание словаря')
# Создать словарь можно следующими способами:
# - с помощью функции dict(). Форматы функции:
# dict(<Ключ l>=<Значение 1>[, . . . , <Ключ N>=<Значение N>])
# dict(<Список кортежей с двумя элементами: ключом и значением>)
# dict(<Список списков с двумя элементами: ключом и значением>)
# dict(<Словарь>)
# Если параметры не указаны, создается пустой словарь. Примеры:
d = dict()                      # Создаем пустой словарь
print(d)
d = dict({'a': 1, 'b': 2})      # Указан словарь
print(d)
d = dict([('a', 1), ('b', 2)])  # Указан список кортежей
print(d)
d = dict([['a', 1], ['b', 2]])  # Указан список списков
print(d)
d = dict(a=1, b=2)
print(d)
# Объединить два списка в список кортежей позволяет функция zip():
k = ['a', 'b']          # Список с ключами
v = [1, 2]              # Список со значениями
print(list(zip(k, v)))  # Создание списка кортежей
d = dict(zip(k, v))     # Создание словаря
print(d)

# - указав все элементы словаря внутри фигурных скобок - это наиболее часто используемый способ. Между ключом и
# значением ставится двоеточие, а пары «ключ/значение» записываются через запятую. Примеры:
d = {}  # Создание пустого словаря
print(d)
d = {'a': 1, 'b': 2}
print(d)

# - заполнив словарь поэлементно. В этом случае ключ указывается внутри квадратных скобок. Примеры:
d = dict()  # Создаем пустой словарь
d['a'] = 1  # Добавляем элемент1 (ключ 'a')
d['b'] = 2  # Добавляем элемент2 (ключ 'b')
print(d)

# - с помощью метода dict. fromkeys(<Последовательность> [, <Значение>]). Метод создает словарь, ключами которого станут
# элементы заданной последовательности, а их значениями - значение из второго параметра. Если второй параметр не указан,
# элементы созданного словаря получат значение None. Примеры:
d = dict.fromkeys(['a', 'b', 'c'])
print(d)
d = dict.fromkeys(['a', 'b', 'c'], 0)  # Указан список
print(d)
d = dict.fromkeys(('a', 'b', 'c'), 0)  # Указан кортеж
print(d)

# Создать поверхностную копию словаря позволяет функция dict():
d1 = {'a': 1, 'b': 2}  # Создаем словарь
d2 = dict(d1)          # Создаем поверхностную копию
print(d1 is d2)        # Оператор показывает, что это разные объекты
d2['b'] = 10
print(d1, d2)          # Изменилось только значение в переменной d2
# Также можно воспользоваться методом сору():
d1 = {'a': 1, 'b': 2}  # Создаем словарь
d2 = d1.copy()         # Создаем поверхностную копию
print(d1 is d2)        # Оператор показывает, что это разные объекты
d2['b'] = 10
print(d1, d2)          # Изменилось только значение в переменной d2
# Создать полную копию словаря позволяет функция deepcopy() из модуля сору:
d1 = {'a': 1, 'b': [20, 30, 40]}
d2 = dict(d1)           # Создаем поверхностную копию
d2['b'][0] = 'test'
print(d1, d2)           # Изменились значения в двух переменных!!!
d3 = copy.deepcopy(d1)  # Создаем полную копию
d3['b'][1] = 800
print(d1, d3)           # Изменилось значение только в переменной d3
# Начиная с Python 3.7, элементы в словаре хранятся строго в том порядке, в котором они были добавлены в него (в
# предыдущих версиях языка элементы в словаре могли переупорядочиваться интерпретатором).


# 9.2. Операции над словарями
print('9.2. Операции над словарями')
# Обращение к элементам словаря осуществляется с помощью квадратных скобок, в которых указывается ключ. Как говорилось
# ранее, ключ может быть произвольным значением любого типа: строкой, целым числом, кортежем и др. Однако почти всегда
# используются строки. Выведем все элементы словаря:
d = {1: 'int', 'a': 'str', (1, 2): 'tuple'}
print(d[1], d['a'], d[(1, 2)])
# Если элемент с указанным ключом отсутствует в словаре, возбуждается исключение KeyError:
# d = {'a': 1, 'b': 2}
# print(d['c'])  # Обращение к несуществующему элементу
# Traceback (most recent call last):
#   File "/Chapter_09.py", line 97, in <module>
#     print(d['c'])  # Обращение к несуществующему элементу
#           ~^^^^^
# KeyError: 'c'
# Проверить существование ключа в словаре можно с помощью оператора in. Если ключ найден, возвращается значение True, в
# противном случае - False. Примеры:
d = {'a': 1, 'b': 2}
print('a' in d)  # Ключ существует
print('c' in d)  # Ключ не существует
# Проверить, отсутствует ли какой-либо ключ в словаре, позволит оператор not in. Если ключ отсутствует, возвращается
# True, иначе - False. Примеры:
d = {'a': 1, 'b': 2}
print('c' not in d)  # Ключ не существует
print('a' not in d)  # Ключ существует
# Метод get(<Ключ>[, <Значение по умолчанию>]) позволяет избежать возбуждения исключения KeyError при отсутствии в
# словаре указанного ключа. Если заданный ключ в текущем словаре существует, метод возвращает соответствующее ему
# значение, если ключ не существует - None или значение из второго параметра. Пример:
d = {'a': 1, 'b': 2}
print(d.get('a'), d.get('c'), d.get('c', 800))
# Кроме того, можно воспользоваться методом setdefault(<Ключ>[, <Значение по умолчанию>]). Если заданный ключ в текущем
# словаре существует, метод возвращает соответствующее ему значение, в противном случае в словаре создается новый
# элемент со значением из второго параметра. Если второй параметр не указан, значением нового элемента будет None.
# Примеры:
d = {'a': 1, 'b': 2}
print(d.setdefault('a'), d.setdefault('c'), d.setdefault('d', 0))
print(d)
# Так как словари относятся к изменяемым типам данных, мы можем изменить элемент по ключу. Если элемент с указанным
# ключом отсутствует в словаре, он будет создан. Пример:
d = {'a': 1, 'b': 2}
d['a'] = 800       # Изменение элемента по ключу
d['c'] = 'string'  # Будет добавлен новый элемент
print(d)
# Получить размер словаря позволяет функция len():
d = {'a': 1, 'b': 2}
print(len(d))
# Удалить элемент из словаря можно с помощью оператора del:
d = {'a': 1, 'b': 2}
del d['b']  # Удаляем элемент с ключом 'b'
print(d)
# Оператор a | b (поддерживается, начиная с Python 3.9) возвращает новый словарь, содержащий все элементы из словарей a
# и b. Если оба словаря содержат элементы с одинаковыми ключами, значения этих элементов будут взяты из словаря b.
# Пример:
d1 = {'a': 1, 'b': 2}
d2 = {'b': 20, 'c': 3}
print(d1 | d2)
# Оператор a |= b (также поддерживается, начиная с Python 3.9) дополняет словарь a элементами из словаря b. Если оба
# словаря содержат элементы с одинаковыми ключами, значения этих элементов будут взяты из словаря b. Примеры:
d1 = {'a': 1, 'b': 2}
d2 = {'b': 20, 'c': 3}
d1 |= d2
print(d2)
print(d1)


# 9.3. Перебор элементов словаря
print('9.3. Перебор элементов словаря')
# Перебрать все элементы словаря можно с помощью цикла перебора последовательности (хотя словари и не являются
# последовательностями). Для примера выведем элементы словаря двумя способами. Первый способ использует метод keys(),
# возвращающий объект с ключами словаря. Во втором случае мы просто указываем словарь в инструкции цикла. На каждой
# итерации цикла будет возвращаться ключ, с помощью которого внутри цикла можно получить значение, соответствующее этому
# ключу test_00046.py.
# Начиная с Python 3.7, элементы словаря выводятся в порядке их создания (в предыдущих версиях языка они могли
# выводиться в другом порядке).
# Чтобы вывести элементы словаря с сортировкой по ключам, следует получить список ключей и отсортировать его методом
# sort() test_00047.py.
# Для сортировки ключей также можно воспользоваться функцией sorted() test_00048.py.
# Так как на каждой итерации возвращается ключ словаря, функции sorted() можно передать сам словарь, а не результат
# выполнения метода keys() test_00049.py.


# 9.4. Методы и функции для работы со словарями
print('9.4. Методы и функции для работы со словарями')
# Объект словаря поддерживает следующие методы:
# - keys() - возвращает объект dict_keys, содержащий все ключи текущего словаря. Этот объект поддерживает итерации, а
# также операции над множествами. Примеры:
d1, d2 = {'a': 1, 'b': 2}, {'a': 3, 'c': 4, 'd': 5}
print(d1.keys(), d2.keys())              # Получаем объект dict_keys
print(list(d1.keys()), list(d2.keys()))  # Получаем списка ключей
for k in d1.keys():
    print(k, end=' ')
print()
print(d1.keys() | d2.keys())  # Объединение
print(d1.keys() - d2.keys())  # Разница
print(d2.keys() - d1.keys())  # Разница
print(d1.keys() & d2.keys())  # Одинаковые ключи
print(d1.keys() ^ d2.keys())  # Уникальные ключи

# - values() - возвращает объект dict_values, содержащий все значения словаря. Этот объект поддерживает итерации.
# Примеры:
d = {'a': 1, 'b': 2}
print(d.values())        # Получаем объекта dict_values
print(list(d.values()))  # Получаем списка значений
print([v for v in d.values()])

# - items() - возвращает объект dict_items, содержащий кортежи с двумя элементами: ключом и значением соответствующего
# элемента текущего словаря. Этот объект поддерживает итерации. Примеры:
d = {'a': 1, 'b': 2}
print(d.items())        # Получаем объекта dict_items
print(list(d.items()))  # Получаем списка кортежей

# - <Ключ> in <Словарь> - проверяет существование указанного ключа в словаре. Если ключ найден, то возвращает значение
# True, в противном случае - False.
d = {'a': 1, 'b': 2}
print('a' in d)  # Ключ существует
print('c' in d)  # Ключ не существует

# - <Ключ> not in <Словарь> - проверяет отсутствие указанного ключа в словаре. Если такого ключа нет, то возвращает
# значение True, в противном случае - False.
print('c' not in d)  # Ключ не существует
print('a' not in d)  # Ключ существует

# - get(<Ключ>[, <Значение по умолчанию>]) - если заданный ключ присутствует в текущем словаре, метод возвращает
# значение, соответствующее этому ключу. Если ключ отсутствует, возвращается None или значение из второго параметра.
# Пример:
d = {'a': 1, 'b': 2}
print(d.get('a'), d.get('c'), d.get('c', 800))

# - setdefault(<Ключ>[, <Значение по умолчанию>]) - если заданный ключ присутствует в текущем словаре, метод возвращает
# значение, соответствующее этому ключу. Если ключ отсутствует, в словаре создается новый элемент со значением из
# второго параметра. Если второй параметр не указан, значением нового элемента будет None. Примеры:
d = {'a': 1, 'b': 2}
print(d.setdefault('a'), d.setdefault('c'), d.setdefault('d', 0))
print(d)

# - рор(<Ключ>[, <Значение по умолчанию>]) - удаляет из текущего словаря элемент с указанным ключом и возвращает его
# значение. Если ключ отсутствует, возвращается значение из второго параметра. Если ключ отсутствует, и второй параметр
# не указан, возбуждается исключение KeyError. Примеры:
d = {'a': 1, 'b': 2, 'c': 3}
print(d.pop('a'), d.pop('n', 0))
# d.pop('n')  # Ключ отсутствует и нет второго параметра
# Traceback (most recent call last):
#   File "/Chapter_09.py", line 228, in <module>
#     d.pop('n')  # Ключ отсутствует и нет второго параметра
#     ^^^^^^^^^^
# KeyError: 'n'
print(d)

# - popitem() - удаляет из текущего словаря последний элемент и возвращает кортеж из ключа и значения удаленного
# элемента. Если словарь пустой, возбуждается исключение KeyError. Примеры:
d = {'a': 1, 'b': 2}
print(d.popitem())  # Удаление произвольного элемента
print(d.popitem())  # Удаление произвольного элемента
# print(d.popitem())  # Словарь пустой. Возбуждается исключение
# Traceback (most recent call last):
#   File "/Chapter_09.py", line 241, in <module>
#     print(d.popitem())  # Словарь пустой. Возбуждается исключение
#           ^^^^^^^^^^^
# KeyError: 'popitem(): dictionary is empty'
# В версиях Python, предшествующих 3.7, метод popitem() удалял не последний, а произвольный элемент словаря (поскольку
# порядок хранения элементов в словаре мог меняться в процессе работы программы);

# - clear() - удаляет все элементы текущего словаря и ничего не возвращает:
d = {'a': 1, 'b': 2}
d.clear()  # Удаление всех элементов
print(d)   # Словарь теперь пустой

# - update() - добавляет в текущий словарь заданные элементы. Результата не возвращает. Форматы метода:
# update(<Ключ 1>=<Значение 1>[, ... , <Ключ N>=<Значение N>])
# update(<Словарь>)
# update(<Список кортежей с двумя элементами: ключом и значением>)
# update(<Список списков с двумя элементами: ключом и значением>)
# Если элемент с указанным ключом уже присутствует в текущем словаре, то его значение будет перезаписано. Примеры:
d = {'a': 1, 'b': 2}
d.update(c=3, d=4)
print(d)
d.update({'c': 10, 'd': 20})          # Словарь
print(d)                              # Значения элементов перезаписаны
d.update([('d', 80), ('е', 6)])       # Список кортежей
print(d)
d.update([['a', 'str'], ['i', 't']])  # Список списков
print(d)

# - сору() - создает поверхностную копию текущего словаря:
d1 = {'а': 1, 'b': [10, 20]}
d2 = d1.copy()      # Создаем поверхностной копии
print(d1 is d2)     # Это разные объекты
d2['a'] = 800       # Изменение значения
print(d1, d2)       # Изменилось значение только в d2
d2['b'][0] = 'new'  # Изменяем значение вложенного списка
print(d1, d2)       # Изменились значения и в d1, и в d2!!!
# Чтобы создать полную копию словаря, следует воспользоваться функцией deepcopy() из модуля сору.

# - reversed(<Словарь>) (поддерживается, начиная с Python 3.8) - возвращает итератор, который выдает ключи заданного
# словаря, приведенные в обратном порядке:
d = {'a': 1, 'b': 2, 'c': 3}
for k in reversed(d):
    print(k + ' => ' + str(d[k]), end=' ')
print()


# 9.5. Генераторы словарей
print('9.5. Генераторы словарей')
# Помимо генераторов списков и множеств, Python поддерживает генераторы словарей.
# Формат записи генератора словаря:
# {<Выражение ключа>: <Выражение значения> for (<Переменная ключа>, <Переменная значения>) in <Исходное отображение>}
# В заданную переменную ключа на каждой итерации помещается ключ очередного элемента заданного исходного отображения, а
# в переменную значения - значение очередного элемента. Заданное выражение ключа вычисляет ключ, а заданное выражение
# значения - значение очередного элемента создаваемого словаря. Примеры:
keys = ['а', 'b']  # Список с ключами
values = [1, 2]    # Список со значениями
print({k: v for (k, v) in zip(keys, values)})
print({k: 0 for k in keys})
# Пример более сложного генератора словаря, создающего из исходного словаря новый, содержащий только элементы с четными
# значениями:
d = {'а': 1, 'b': 2, 'с': 3, 'd': 4}
print({k: v for (k, v) in d.items() if v % 2 == 0})
