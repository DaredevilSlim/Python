#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import time  # Подключаем модуля time
import math  # Подключаем модуля math

# ГЛАВА 12
# Модули, пакеты и импорт
# Модуль-это любой файл с программным кодом. Любой модуль может использовать идентификаторы (переменные, функции и
# классы, о которых речь пойдет в главе 13), созданные в другом модуле, выполнив процедуру подключения, или импорта,
# последнего. В составе интерпретатора Python поставляется большой набор модулей, содержащих полезные переменные,
# функции и классы. Эти модули называются встроенными, а их совокупность - стандартной библиотекой языка.

# ПРИМЕЧАНИЕ - Модули можно создавать не только на самом Python, но и на языке С++, компилируя их в машинный код. В
# стандартной библиотеке содержится ряд таких модулей.

# Модуль Python представляется особым объектом, содержащим ряд атрибутов. Так, атрибут __name__ содержит имя модуля в
# виде строки. У модуля, непосредственно запущенного на исполнение, этот атрибут хранит строку '__main__'. Пример:
print(__name__)  # Выведет: main
# Проверить, является модуль непосредственно запущенным (главным модулем, или главной программой) или импортированным,
# позволяет следующий код:
if __name__ == '__main__':
    print('Это главная программа')
else:
    print('Импортированный модуль')


# 12.1. Импорт модуля целиком
print('12.1. Импорт модуля целиком')
# Можно импортировать модуль целиком и использовать любые созданные в нем переменные, функции и классы. Для этого
# предназначена языковая конструкция следующего формата:
# import <Модуль 1> [as <Псевдоним 1>], ..., <Модуль N> [as <Псевдоним N>]
# Имя модуля не должно содержать расширения и пути к файлу, а также удовлетворять всем требованиям, предъявляемым к
# именам переменных (см.разд. 2.1). Дело в том, что при импорте модуля интерпретатор создает переменную, которой
# присваивает объект импортированного модуля.
# Все идентификаторы, созданные в импортированном модуле, доступны через атрибуты объекта этого модуля (атрибут - это
# переменная, входящая в состав объекта). Для доступа к атрибутам следует использовать такой синтаксис:
# <Переменная с объектом модуля>.<Атрибут с нужным идентификатором>
# Поскольку переменная с объектом модуля и атрибут отделяются друг от друга точкой, такая запись получила название
# точечной нотации.
# Для примера импортируем модуль time и получим текущую дату вызовом функции strftime(), определенной в этом модуле:
print(time.strftime('%d.%m.%Y'))
# Подключим сразу два модуля: time и math:
print(time.strftime('%d.%m.%Y'))
print(math .pi)  # Число п
# Функция getattr() позволяет получить значение. атрибута с заданным в виде строки име­
# нем, принадлежащего указанному модуmо. С помощью этой функции можно сформировать
# имя нужного атрибута программно. Формат функции:
# getattr(<Oбъeкт модуля>, <Имя атрибута>[, <Значение по умолчанию>])
# Если указанный атрибут не нацден, возвращается заданное значение по умолчанию, а если
# оно не указано- возбуждается искmочение AttributeError. Пример:
# import math
# print(getattr(math, "pi"))
# print(getattr(math, "х", 50))
# # Будет выведено число п
# # Будет выведено 50, т. к. х не существует
# Проверить существование атрибута с заданным именем в указанном модуле позволяет
# функция hasattr(<Модуль>, <Имя атрибута>). Если атрибут существует, функция возвра­
# щает значение тrue, в противном случае - False. Напишем функцию проверки существо­
# вания атрибута в модуле,mаth (листинг 12.1).
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#

# 244
