#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from decimal import Decimal   # Подключаем из модуля decimal содержащийся в нем объект Decimal

# Глава 3
# Операторы
# Оператор - языковая конструкция, выполняющая над переданными ему значениями (операндами) какое-либо элементарное
# действие (например, математическое сложение). Набор операторов, поддерживаемых Python, определен разработчиками этого
# языка и не может быть расширен (в отличие от набора поддерживаемых функций).

# 3.1. Математические операторы
# Производить операции над числами позволяют математические операторы:
# + - сложение
print(10 + 5)      # Целые числа
print(12.4 + 5.2)  # Вещественные числа
print(10 + 12.4)   # Целые и вещественные числа

# - - вычитание
print(10 - 5)      # Целые числа
print(12.4 - 5.2)  # Вещественные числа
print(12 - 5.2)    # Целые и вещественные числа

# * - умножение:
print(10 * 5)      # Целые числа
print(12.4 * 5.2)  # Вещественные числа
print(12 * 5.2)    # Целые и вещественные числа

# / - деление. Результатом деления всегда является вещественное число, даже если производится деление целых чисел.
print(10 / 5)      # Деление целых чисел без остатка
print(10 / 5)      # Деление целых чисел с остатком
print(10.0 / 5.0)  # Деление вещественных чисел
print(10.0 / 3.0)  # Деление вещественных чисел
print(10 / 5.0)    # Деление целого числа на вещественное
print(10.0 / 5)    # Деление вещественного числа на целое

# // - деление с округлением вниз. Остаток всегда отбрасывается.
print(10 // 5)      # Деление целых чисел без остатка
print(10 // 3)      # Деление целых чисел с остатком
print(10.0 // 5.0)  # Деление вещественных чисел
print(10.0 // 3.0)  # Деление вещественных чисел
print(10 // 5.0)    # Деление целого числа на вещественное
print(10 // 3.0)    # Деление целого числа на вещественное
print(10.0 // 5)    # Деление вещественного числа на целое
print(10.0 // 3)    # Деление вещественного числа на целое

# % - остаток от деления:
print(10 % 5)      # Деление целых чисел без остатка
print(10 % 3)      # Деление целых чисел с остатком
print(10.0 % 5.0)  # Операция над вещественными числами
print(10.0 % 3.0)  # Операция над вещественными числами
print(10 % 5.0)    # Операция над целыми и вещественными числами
print(10 % 3.0)    # Операция над целыми и вещественными числами
print(10.0 % 5)    # Операция над целыми и вещественными числами
print(10.0 % 3)    # Операция над целыми и вещественными числами

# ** - возведение в степень. Основание указывается первым операндом, показатель - вторым.
print(10 ** 2, 10.0 ** 2)

# унарный минус ( - ) - изменяет знак числа на противоположный:
print(-10, -10.0, -(-10), -(-10.0))

# унарный плюс ( +) - ничего не делает с числом:
print(+10, +10.0)
# Как видно из приведенных примеров, операции над числами разных типов возвращают число, имеющее более сложный из типов,
# участвующих в операции. Целые числа имеют самый простой тип, далее идут вещественные числа и самый сложный тип -
# комплексные числа. Таким образом, если в операции участвуют целое число и вещественное, то целое число будет
# автоматически преобразовано в вещественное число, затем будет произведена операция над вещественными числами, а
# результатом станет вещественное число.
# При выполнении операций над вещественными числами следует учитывать ограничения точности вычислений. Например,
# результат следующей операции может показаться странным:
print(0.3 - 0.1 - 0.1 - 0.1)
# Ожидаемым бьш бы результат 0.0, но, как видно из примера, мы получили совсем другой результат. Если необходимо
# производить операции с фиксированной точностью, следует использовать модуль decimal.
print(Decimal('0.3') - Decimal('0.1') - Decimal('0.1') - Decimal('0.1'))


# 3.2. Двоичные операторы
# Двоичные операторы предназначены для манипуляции отдельными битами:
# ~ - двоичная инверсия. Значение каждого бита заменяется на противоположное:
# x = 100  # 01100100
# x = ~x   # 10011011

# & - двоичное И:
# x = 100    # 01100100
# у = 75     # 01001011
# z = х & у  # 01000000

# | - двоичное ИЛИ:
# x = 100    # 01100100
# у = 75     # 01001011
# z = х | у  # 01101111

# ^ - двоичное исключающее ИЛИ:
# х = 100    # 01100100
# y = 250    # 11111010
# z = х ^ у  # 10011110

# << - сдвиг влево - сдвигает двоичное представление числа, заданного первым операндом, влево на количество разрядов,
# указанное вторым операндом, и заполняет разряды справа нулями:
# х = 100     # 01100100
# у = х << 1  # 11001000
# z = у << 1  # 10010000
# k = z << 2  # 01000000
# >> - сдвиг вправо - сдвигает двоичное представление числа, заданного первым операндом, вправо на количество разрядов,
# указанное вторым операндом, и заполняет разряды слева нулями, если число положительное, и единицами, если число
# отрицательное:
# х = 100     # 01100100
# у = х >> 1  # 00110010
# z = у >> 1  # 00011001
# k = z >> 2  # 00000110
# х = -127    # 10000001
# у = х >> 1  # 11000000
# z = у >> 2  # 11110000
# k = z << 1  # 11100000
# m = k >> 1  # 11110000


# 3.3. Операторы для работы с последовательностями
# Для работы с последовательностями предназначены следующие операторы:
# + - конкатенация (объединение):
print('Строка1' + 'Строка2')  # Конкатенация строк
print([1, 2, 3] + [4, 5, 6])  # Списки
print((1, 2, 3) + (4, 5, 6))  # Кортежи

#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#


# 58

