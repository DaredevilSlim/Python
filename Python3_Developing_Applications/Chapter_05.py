#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from decimal import Decimal     # Подключаем из модуля decimal содержащийся в нем объект Decimal
from fractions import Fraction  # Подключаем из модуля fractions содержащийся в нем объект Fraction

# Глава 5
# Числа
# Язык Python поддерживает следующие числовые типы данных:
# - int - целые числа. Размер числа ограничен лишь объемом оперативной памяти;
# - float - вещественные числа;
# - complex - комплексные числа.
# Операции над числами разных типов возвращают число, имеющее более сложный тип из типов, участвующих в операции. Целые
# числа имеют самый простой тип, далее идут вещественные числа и самый сложный тип - комплексные числа. Таким образом,
# если в операции участвуют целое число и вещественное, то целое число будет автоматически преобразовано в вещественное
# число, а затем произведена операция над вещественными числами.
# Результатом этой операции будет вещественное число.


# 5.1. Запись чисел
print('5.1. Запись чисел')
# Целые числа в десятичной системе счисления записываются как есть:
x = 0
y = 10
z = -80
print(x, y, z)
# Можно записать целое число в двоичной, восьмеричной или шестнадцатеричной форме. Такие числа будут автоматически
# преобразованы в десятичные целые числа.
# - Двоичные числа начинаются с комбинации символов 0b (или 0B) и содержат цифры 0 или 1:
print(0b11111111, 0b101101)
# - Восьмеричные числа начинаются с нуля и следующей за ним латинской буквы о (регистр не имеет значения) и содержат
# цифры от О до 7:
print(0o7, 0o12, 0o777, 0o7, 0o12, 0o777)
# - Шестнадцатеричные числа начинаются с комбинации символов 0x (или 0X) и могут содержать цифры от О до 9 и буквы от
# А до F (регистр не имеет значения):
print(0X9, 0xA, 0x10, 0xFFF, 0xfff)
# Длинные целые числа для улучшения читаемости кода можно разбивать на группы цифр, вставляя символы подчеркивания:
print(1_000_000)
print(0b1111_1111)
print(0o2_777)
print(0xab_cd)
# Вещественное число может содержать точку и (или) быть представлено в экспоненциальной форме с буквой Е (регистр не
# имеет значения). Начальный 0 можно не указывать. Примеры:
print(10., .14, 3.14, 11E20, 2.5e-12)
# При выполнении операций над вещественными числами следует учитывать ограничения точности вычислений. Например,
# результат следующей операции может показаться странным:
print(0.3 - 0.1 - 0.1 - 0.1)
# Ожидаемым был бы результат 0.0, но, как видно из примера, мы получили совсем другое значение. Если необходимо
# производить операции с фиксированной точностью, то следует использовать модуль decimal:
print(Decimal('0.3') - Decimal('0.1') - Decimal('0.1') - Decimal('0.1'))
# Кроме того, можно использовать дроби, поддержка которых реализована в модуле fractions. При создании дроби можно
# указать два целых числа (числитель и знаменатель), одно вещественное число или строку с вещественным числом.
# Для примера создадим несколько дробей. Вот так формируется дробь 4/5:
print(Fraction(4, 5))
# А вот так - дробь 1/2, причем можно сделать это тремя способами:
print(Fraction(1, 2))
print(Fraction(0.5))
print(Fraction('0.5'))
# Над дробями можно производить арифметические операции, как и над обычными числами:
print(Fraction(9, 5) - Fraction(2, 3))
print(Fraction('0.3') - Fraction('0.1') - Fraction('0.1') - Fraction('0.1'))
print(float(Fraction(0, 1)))
# Комплексные числа записываются в формате:
# <Вещественная часть>+<Мнимая часть>J
# Здесь буква J может стоять в любом регистре. Примеры комплексных чисел:
print(2+5J, 8j)
# Подробное рассмотрение модулей decimal и fractions, а также комплексных чисел выходит за рамки нашей книги. За
# информацией обращайтесь к документации по Python.


# 5.2. Обработка чисел
print('5.2. Обработка чисел')
# Для работы с числами предназначены следующие функции:
# int([<Значение>[, <Система счисления>]]) - преобразует заданное значение в целое число. Во втором параметре можно
# указать систему счисления преобразуемого числа (по умолчанию: 10). Пример:
print(int(7.5), int('71', 10), int('0o71', 8), int('0xA', 16))
print(int(), int('0b11111111', 2))

# float([<Число или строка>]) - преобразует заданное целое число или строку в вещественное число:
print(float(7), float('7.1'), float('12.'))
print(float('inf'), float('-Infinity'), float('nan'))
print(float())

# bin(<Число>) - преобразует заданное десятичное число в двоичное и возвращает его в виде строки:
print(bin(255), bin(1), bin(-45))

# oct(<Число>) - преобразует заданное десятичное число в восьмеричное и возвращает его в виде строки:
print(oct(7), oct(8), oct(64))

# hex(<Число>) - преобразует заданное десятичное число в шестнадцатеричное и возвращает его в виде строки:
print(hex(10), hex(16), hex(255))

# round(<Число>[, <Количество знаков после точки>]) - округляет заданное число и возвращает результат. Числа с дробной
# частью, меньшей 0.5, округляет до ближайшего меньшего целого, числа с дробной частью, большей 0.5, - до ближайшего
# большего целого, числа с дробной частью, равной 0.5,- до ближайшего четного числа. Примеры:
print(round(0.49), round(0.50), round(0.51))
print(round(1.49), round(1.50), round(1.51))
print(round(2.49), round(2.50), round(2.51))
print(round(3.49), round(3.50), round(3.51))
# Во втором параметре можно указать желаемое количество знаков после запятой (по умолчанию 0 - т.е. число будет
# округлено до целого):
print(round(1.524, 2), round(1.525, 2), round(1.5555, 3))

# abs(<Число>) - возвращает абсолютное значение заданного числа:
print(abs(-10), abs(10), abs(-12.5))

# pow(<Основание>, <Показатель>[, <Делитель>]) - возводит <Основание> в степень, заданную <Показателем>, и возвращает
# результат:
print(pow(10, 2), 10 ** 2, pow(3, 3), 3 ** 3)
# Если указан третий параметр, возвращается остаток от деления полученного результата на значение этого параметра:
print(pow(10, 2, 2), (10 ** 2) % 2, pow(3, 3, 2), (3 ** 3) % 2)

# max() - возвращает максимальное число. Поддерживает два формата вызова:
# mах(<Число 1>, <Число 2>, . . ., <Число n>[, kеу=<Функция, выдающая число>])
# max(<Последовательность>[, kеу=<Функция, выдающая число>][, default=<Значение по умолчанию>])
# Первый формат возвращает максимальное число из указанных:
print(max(1, 2, 3), max(3, 2, 3, 1), max(1, 1.0), max(1.0, 1))
# Вместо чисел можно указать значения другого типа. Однако тогда в именованном параметре key следует задать функцию,
# которая будет получать с единственным параметром очередное значение и возвращать его же, преобразованное в числовой
# тип. Результат в этом случае будет возвращаться в изначальном виде, безо всяких преобразований.
# Пример с числами, указанными в виде строк (для преобразования используется функция str()):
print(max('1', '435', '65', '-57', key=str))
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#


# 83

