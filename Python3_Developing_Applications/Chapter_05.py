#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from decimal import Decimal     # Подключаем из модуля decimal содержащийся в нем объект Decimal
from fractions import Fraction  # Подключаем из модуля fractions содержащийся в нем объект Fraction
import math                     # Подключаем модуль math
import random                   # Подключаем модуль random

# Глава 5
# Числа
# Язык Python поддерживает следующие числовые типы данных:
# - int - целые числа. Размер числа ограничен лишь объемом оперативной памяти;
# - float - вещественные числа;
# - complex - комплексные числа.
# Операции над числами разных типов возвращают число, имеющее более сложный тип из типов, участвующих в операции. Целые
# числа имеют самый простой тип, далее идут вещественные числа и самый сложный тип - комплексные числа. Таким образом,
# если в операции участвуют целое число и вещественное, то целое число будет автоматически преобразовано в вещественное
# число, а затем произведена операция над вещественными числами.
# Результатом этой операции будет вещественное число.


# 5.1. Запись чисел
print('5.1. Запись чисел')
# Целые числа в десятичной системе счисления записываются как есть:
x = 0
y = 10
z = -80
print(x, y, z)
# Можно записать целое число в двоичной, восьмеричной или шестнадцатеричной форме. Такие числа будут автоматически
# преобразованы в десятичные целые числа.
# - Двоичные числа начинаются с комбинации символов 0b (или 0B) и содержат цифры 0 или 1:
print(0b11111111, 0b101101)
# - Восьмеричные числа начинаются с нуля и следующей за ним латинской буквы о (регистр не имеет значения) и содержат
# цифры от О до 7:
print(0o7, 0o12, 0o777, 0o7, 0o12, 0o777)
# - Шестнадцатеричные числа начинаются с комбинации символов 0x (или 0X) и могут содержать цифры от О до 9 и буквы от
# А до F (регистр не имеет значения):
print(0X9, 0xA, 0x10, 0xFFF, 0xfff)
# Длинные целые числа для улучшения читаемости кода можно разбивать на группы цифр, вставляя символы подчеркивания:
print(1_000_000)
print(0b1111_1111)
print(0o2_777)
print(0xab_cd)
# Вещественное число может содержать точку и (или) быть представлено в экспоненциальной форме с буквой Е (регистр не
# имеет значения). Начальный 0 можно не указывать. Примеры:
print(10., .14, 3.14, 11E20, 2.5e-12)
# При выполнении операций над вещественными числами следует учитывать ограничения точности вычислений. Например,
# результат следующей операции может показаться странным:
print(0.3 - 0.1 - 0.1 - 0.1)
# Ожидаемым был бы результат 0.0, но, как видно из примера, мы получили совсем другое значение. Если необходимо
# производить операции с фиксированной точностью, то следует использовать модуль decimal:
print(Decimal('0.3') - Decimal('0.1') - Decimal('0.1') - Decimal('0.1'))
# Кроме того, можно использовать дроби, поддержка которых реализована в модуле fractions. При создании дроби можно
# указать два целых числа (числитель и знаменатель), одно вещественное число или строку с вещественным числом.
# Для примера создадим несколько дробей. Вот так формируется дробь 4/5:
print(Fraction(4, 5))
# А вот так - дробь 1/2, причем можно сделать это тремя способами:
print(Fraction(1, 2))
print(Fraction(0.5))
print(Fraction('0.5'))
# Над дробями можно производить арифметические операции, как и над обычными числами:
print(Fraction(9, 5) - Fraction(2, 3))
print(Fraction('0.3') - Fraction('0.1') - Fraction('0.1') - Fraction('0.1'))
print(float(Fraction(0, 1)))
# Комплексные числа записываются в формате:
# <Вещественная часть>+<Мнимая часть>J
# Здесь буква J может стоять в любом регистре. Примеры комплексных чисел:
print(2+5J, 8j)
# Подробное рассмотрение модулей decimal и fractions, а также комплексных чисел выходит за рамки нашей книги. За
# информацией обращайтесь к документации по Python.


# 5.2. Обработка чисел
print('5.2. Обработка чисел')
# Для работы с числами предназначены следующие функции:
# int([<Значение>[, <Система счисления>]]) - преобразует заданное значение в целое число. Во втором параметре можно
# указать систему счисления преобразуемого числа (по умолчанию: 10). Пример:
print(int(7.5), int('71', 10), int('0o71', 8), int('0xA', 16))
print(int(), int('0b11111111', 2))

# float([<Число или строка>]) - преобразует заданное целое число или строку в вещественное число:
print(float(7), float('7.1'), float('12.'))
print(float('inf'), float('-Infinity'), float('nan'))
print(float())

# bin(<Число>) - преобразует заданное десятичное число в двоичное и возвращает его в виде строки:
print(bin(255), bin(1), bin(-45))

# oct(<Число>) - преобразует заданное десятичное число в восьмеричное и возвращает его в виде строки:
print(oct(7), oct(8), oct(64))

# hex(<Число>) - преобразует заданное десятичное число в шестнадцатеричное и возвращает его в виде строки:
print(hex(10), hex(16), hex(255))

# round(<Число>[, <Количество знаков после точки>]) - округляет заданное число и возвращает результат. Числа с дробной
# частью, меньшей 0.5, округляет до ближайшего меньшего целого, числа с дробной частью, большей 0.5, - до ближайшего
# большего целого, числа с дробной частью, равной 0.5,- до ближайшего четного числа. Примеры:
print(round(0.49), round(0.50), round(0.51))
print(round(1.49), round(1.50), round(1.51))
print(round(2.49), round(2.50), round(2.51))
print(round(3.49), round(3.50), round(3.51))
# Во втором параметре можно указать желаемое количество знаков после запятой (по умолчанию 0 - т.е. число будет
# округлено до целого):
print(round(1.524, 2), round(1.525, 2), round(1.5555, 3))

# abs(<Число>) - возвращает абсолютное значение заданного числа:
print(abs(-10), abs(10), abs(-12.5))

# pow(<Основание>, <Показатель>[, <Делитель>]) - возводит <Основание> в степень, заданную <Показателем>, и возвращает
# результат:
print(pow(10, 2), 10 ** 2, pow(3, 3), 3 ** 3)
# Если указан третий параметр, возвращается остаток от деления полученного результата на значение этого параметра:
print(pow(10, 2, 2), (10 ** 2) % 2, pow(3, 3, 2), (3 ** 3) % 2)

# max() - возвращает максимальное число. Поддерживает два формата вызова:
# mах(<Число 1>, <Число 2>, . . ., <Число n>[, kеу=<Функция, выдающая число>])
# max(<Последовательность>[, kеу=<Функция, выдающая число>][, default=<Значение по умолчанию>])
# Первый формат возвращает максимальное число из указанных:
print(max(1, 2, 3), max(3, 2, 3, 1), max(1, 1.0), max(1.0, 1))
# Вместо чисел можно указать значения другого типа. Однако тогда в именованном параметре key следует задать функцию,
# которая будет получать с единственным параметром очередное значение и возвращать его же, преобразованное в числовой
# тип. Результат в этом случае будет возвращаться в изначальном виде, безо всяких преобразований.
# Пример с числами, указанными в виде строк (для преобразования используется функция str()):
print(max('1', '435', '65', '-57', key=str))
# Второй формат возвращает максимальное число из содержащихся в указанной последовательности (например, в списке):
print(max([1, 2, 3]), max([3, 2, 3, 1]), max([1, 1.0]), max([1.0, 1]))
seq = ['1', '435', '65', '-57']
print(max(seq))
# Если указанная последовательность пуста, генерируется исключение valueError, которое приведет к аварийному
# завершению программы, если его не обработать.
# print(max([]))
# Traceback (most recent call last):
#   File 'Chapter_05.py', line 129, in <module>
#     print(max([]))
#           ^^^^^^^
# ValueError: max() arg is an empty sequence
# Однако можно указать в именованном параметре default значение, которое будет возвращаться функцией при передаче ей
# пустой последовательности (исключение в этом случае не генерируется):
print(max([], default=0))

# min() - возвращает минимальное число. Оба поддерживаемых формата вызова аналогичны таковым у функции max(). Примеры:
print(min(1, 2, 3), min(3, 2, 3, 1), min(1, 1.0), min(1.0, 1))
print(min('1', '435', '65', '-57', key=str))
print(min([1, 2, 3]), min([3, 2, 3, 1]), min([1, 1.0]), min([1.0, 1]))
seq = ['1', '435', '65', '-57']
print(min(seq))

# sum(<Последовательность>[, <Начальное значение>]) - возвращает сумму значений элементов заданной последовательности
# (списка, кортежа и пр.) плюс <Начальное значение>. Если второй параметр не указан, начальное значение принимается
# равным О.
# Если последовательность пуста, возвращается значение второго параметра. Пример:
print(sum((10, 20, 30, 40)), sum([10, 20, 30, 40]))
print(sum([10, 20, 30, 40], 2), sum([], 2))

# divmod(x, у) - возвращает кортеж из двух значений (х // у, х % у):
print(divmod(13, 2))            # 13 == 6 * 2 + 1
print(13 // 2, 13 % 2)
print(divmod(13.5, 2.0))        # 13.5 == 6.0 * 2.0 + 1.5
print(13.5 // 2.0, 13.5 % 2.0)

# В главе 2 говорилось, что в Python любое значение представляется в виде объекта - сложной структуры, хранящей, помимо
# собственно значения, всевозможные связанные с ней данные. Эти данные хранятся в атрибутах - переменных, принадлежащих
# объекту. Объект также содержит методы - принадлежащие ему функции, которые позволяют манипулировать содержащимся в нем
# значением и получать какие-либо сведения о нем. Все объекты, хранящие значения одного типа, создаются на основе одного
# класса - своего рода образца, определяющего функциональность типа, набор содержащихся в нем атрибутов и методов. Имя
# класса совпадает с именем соответствующего ему типа данных (так, класс int служит для представления целых чисел, а
# класс float - вещественных чисел). Класс float, представляющий вещественные числа, поддерживает следующие полезные
# методы:
# - is_integer() - возвращает True, если текущий объект (объект, у которого вызывается метод) вещественного числа не
# содержит дробной части - т.е. фактически представляет собой целое число:
print(2.0.is_integer())
print(2.3.is_integer())
# Обратим внимание, как вызывается метод: его вызов ставится после объекта и отделяется от него точкой;
# - as_integer_ratio() - возвращает кортеж из двух целых чисел, представляющих собой числитель и знаменатель дроби,
# которая соответствует текущему числу:
print(0.5.as_integer_ratio())
print(2.3.as_integer_ratio())
# Начиная с Python 3.8, класс int, представляющий целые числа, также поддерживает метод as_integer_ratio(), только
# знаменатель возвращаемой им дроби всегда равен 1:
print((2).as_integer_ratio())
print((57).as_integer_ratio())


# 5.3. Математические функции
print('5.3. Математические функции')
# Модуль math предоставляет дополнительные функции для работы с числами, а также стандартные константы. Прежде чем
# использовать этот модуль, необходимо подключить его с помощью инструкции:
# import math
# ПРИМЕЧАНИЕ - Для работы с комплексными числами необходимо использовать модуль cmath.
# Модуль math предоставляет стандартные константы, хранящиеся в следующих переменных:
# pi - число Пи:
print(math.pi)
# е - константа е:
print(math.e)
# tau - число т, равное 2Пи:
print(math.tau)
# Также модуль math поддерживает следующие основные функции:
# - sin(<Угол>), cos(<Угол>), tan(<Угол>) - синус, косинус и тангенс. Угол указывается в радианах;
# - asin(<Значение>), acos(<Значение>), atan(<Значение>) - арксинус, арккосинус и арктангенс. Результат возвращается в
# радианах;
# - degrees(<Угол в радианах>) - угол в градусах:
print(math.degrees(math.pi))
# - radians(<Угол в градусах>) - угол в радианах:
print(math.radians(180.0))
# - ехр(<Число>) - экспонента от заданного числа;
# - log(<Число>[, <База>]) - логарифм заданного числа по указанной базе. Если база не указана, вычисляется натуральный
# логарифм (по базе е);
# - log10(<Число>) - десятичный логарифм заданного числа;
# - log2(<Число>) - логарифм по базе 2 от заданного числа;
# - sqrt(<Число>) - квадратный корень от заданного числа:
print(math.sqrt(100), math.sqrt(25))
# - ceil(<Значение>) - заданное значение, округленное до ближайшего большего целого:
print(math.ceil(5.49), math.ceil(5.50), math.ceil(5.51))
# - floor() - заданное значение, округленное до ближайшего меньшего целого:
print(math.floor(5.49), math.floor(5.50), math.floor(5.51))
# - роw(<Основание>, <Показатель>) - указанное основание, возведенное в степень, которая задана <Показателем>. В отличие
# от оператора **, всегда возвращает результат в виде вещественного числа. Пример:
print(math.pow(10, 2), 10 ** 2, math.pow(3, 3), 3 ** 3)
# fabs(<Число>) - абсолютное значение заданного числа. В отличие от функции abs(), всегда возвращает результат в виде
# вещественного числа. Пример:
print(math.fabs(10), math.fabs(-10), math.fabs(-12.5))
# - fmod(<Делимое>, <Делитель>) - остаток от деления. В отличие от оператора %, всегда возвращает результат в виде
# вещественного числа. Пример:
print(math.fmod(10, 5), 10 % 5, math.fmod(10, 3), 10 % 3)
# - factorial(<Число>) - факториал заданного числа: Начиная с Python 3.8, принимает только целые числа. Пример:
print(math.factorial(5), math.factorial(6))
# - fsum(<Последовательность>) - возвращает точную сумму чисел из заданной последовательности:
print(sum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]))
print(math.fsum([.1, .1, .1, .1, .1, .1, .1, .1, .1, .1]))
# ПРИМЕЧАНИЕ - В этом разделе мы рассмотрели только основные функции, поддерживаемые модулем math. Чтобы получить полный
# список функций, обращайтесь к документации по Python.


# 5.4. Генерирование случайных чисел
print('5.4. Генерирование случайных чисел')
# Модуль random предоставляет инструменты для генерирования случайных чисел. Сначала необходимо подключить его с помощью
# инструкции:
# import random
# Основные функции, содержащиеся в этом модуле:
# random() - возвращает псевдослучайное число от 0.0 до 1.0:
print(random.random())
print(random.random())
print(random.random())

# seed([<База>][, version=2]) - настраивает генератор случайных чисел на новую последовательность. Если первый параметр
# не указан, в качестве базы для случайных чисел будет использовано системное время. При одинаковых значениях базы
# генерируется одинаковая последовательность чисел. Пример:
print(random.seed(10))
print(random.random())
print(random.seed(10))
print(random.random())

# uniform(<Начало>, <Конец>) - возвращает псевдослучайное вещественное число в диапазоне от параметра <Начало> до
# параметра <Конец>:
print(random.uniform(0, 10))
print(random.uniform(0, 10))

# randint(<Начало>, <Конец>) - возвращает псевдослучайное целое число в диапазоне от параметра <Начало> до параметра
# <Конец>:
print(random.randint(0, 10))
print(random.randint(0, 10))

# randrange([<Начало>, ]<Конец>[, <Шаг>]) - возвращает случайный элемент из создаваемого «за кадром» диапазона:
print(random.randrange(10))
print(random.randrange(0, 10))
print(random.randrange(0, 10, 2))

# choice(<Последовательность>) - возвращает случайный элемент из заданной последовательности:
print(random.choice('string'))         # Строка
print(random.choice(['s', 't', 'r']))  # Список
print(random.choice(('s', 't', 'r')))  # Кортеж

# shuffle(<Список>) - перемешивает элементы заданного списка случайным образом. Результата не возвращает. Пример:
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
random.shuffle(arr)
print(arr)

# sample() - возвращает список из указанного количества элементов, которые будут выбраны случайным образом из заданной
# последовательности:
# sample(<Последовательность>, <Количество элементов>[, counts=<Количество повторений элементов>])
print(random.sample('string', 2))
print(random.sample('string', 6))
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(random.sample(arr, 2))
print(arr)  # Сам список не изменяется
print(random.sample((1, 2, 3, 4, 5, 6, 7), 3))
print(random.sample(range(300), 5))
# Начиная с Python 3.9, поддерживается именованный параметр counts, в котором можно указать последовательность,
# содержащую значения количества повторений элементов из последовательности, заданной первым параметром. Первый элемент
# последовательности из параметра counts укажет количество повторений первого элемента из первой последовательности,
# второй элемент - количество повторений второго элемента и т. д. Например, следующие два вызова функции sample()
# эквивалентны:
print(random.sample('sssttrrrrriinggg', 6))
print(random.sample('string', 6, counts=[3, 2, 5, 2, 1, 3]))
# Также, начиная с Python 3.9, указывать множества в первом параметре функции sample() не допускается - эта возможность
# объявлена устаревшей и подлежащей удалению в будущих версиях языка.
# Напишем функцию-генератор паролей произвольной длины test_00027.py. Для этого добавим в список arr все разрешенные
# символы, а далее в цикле будем получать случайный элемент с помощью функции choice(). По умолчанию будет выдаваться
# пароль из 8 символов.
