#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# import sys
# Или
from sys import stdout
# import builtins

# Глава 1
# 1.3 Структура программы
print('Структура программы:')
# Во многих языках программирования (например, в РНР, Perl и др.) каждая инструкция должна завершаться точкой с запятой.
# В языке Python в конце инструкции также можно поставить точку с запятой, но это не обязательно. Более того, в отличие
# от языка JavaScript, где рекомендуется завершать инструкции точкой с запятой, в языке Python точку с запятой ставить
# не рекомендуется. Концом инструкции является конец строки. Тем не менее, если необходимо разместить несколько
# инструкций на одной строке, точку с запятой следует указать:
# x = 5; y = 10; z = x + y  # Три инструкции на одной строке
# print(z)
# Еще одной отличительной особенностью языка Python является отсутствие ограничительных символов для выделения
# инструкций внутри блока. Например, в языке РНР инструкции внутри цикла while выделяются фигурными скобками:
# В языке Python тот же код будет выглядеть по-иному (test_00005.py).
# Обратите внимание, что перед всеми инструкциями внутри блока расположено одинаковое количество пробелов. Именно так
# в языке Python выделяются блоки. Инструкции, перед которыми расположено одинаковое количество пробелов, являются
# телом блока. В нашем примере две инструкции выполняются десять раз. Концом блока является инструкция, перед которой
# расположено меньшее количество пробелов. В нашем случае это функция print(), которая выводит строку "конец
# программы". Если количество пробелов внутри блока окажется разным, то интерпретатор выведет сообщение о фатальной
# ошибке, и программа будет остановлена. Так язык Python приучает программистов писать красивый и понятный код.
# В языке Python принято использовать четыре пробела для выделения инструкций внутри блока. Если блок состоит из одной
# инструкции, то допустимо разместить ее на одной строке с основной инструкцией. Например, код:
for i in range(1, 11):
    print(i)
print('Конец программы')
# Можно записать так:
for i in range(1, 11): print(i)
print('Конец программы')
# Если инструкция является слишком длинной, то ее можно перенести на следующую строку, например, так:
# - в конце строки поставить символ \, после которого должен следовать перевод строки.  Другие символы (в том числе и
# комментарии) недопустимы.
x = 15 + 20 \
    + 30
print(x)
# - поместить выражение внутри круглых скобок. Этот способ лучше, т. к. внутри круглых скобок можно разместить любое
# выражение.
x = (15 + 20    # Это комментарий
     + 30)
print(x)
# - определение списка и словаря можно разместить на нескольких строках, т. к. при этом используются квадратные и
# фигурные скобки соответственно. Пример определения списка:
arr = [15, 20,  # Это комментарий
       30]
print(arr)
# Пример определения словаря:
arr = {'х': 15, 'у': 20,  # Это комментарий
       'z': 30}
print(arr)


# 1.4 Комментарии
print('Комментарии:')
# Комментарии предназначены для вставки пояснений в текст программы - интерпретатор полностью их игнорирует. Внутри
# комментария может располагаться любой текст, включая инструкции, которые выполнять не следует.
# Помните - комментарии нужны программисту, а не интерпретатору Python. Вставка комментариев в код позволит через
# некоторое время быстро вспомнить предназначение фрагмента кода.
# В языке Python присутствует только однострочный комментарий. Он начинается с символа #:
# Это комментарий
# Однострочный комментарий может начинаться не только с начала строки, но и располагаться после инструкции. Например,
# в следующем примере комментарий расположен после инструкции, предписывающей вывести надпись "Привет, мир!"
print('Привет, мир!')  # Вывод надписи с помощью функции print()
# Если же символ комментария разместить перед инструкцией, то она выполнена не будет:
# print('Привет, мир!') Эта инструкция выполнена не будет
# Если символ # расположен внутри кавычек или апострофов, то он не является символом комментария:
print('# Это НЕ комментарий')
# Так как в языке Python нет многострочного комментария, то комментируемый фрагмент часто размещают внутри утроенных
# кавычек (или утроенных апострофов):
"""
Эта инструкция выполнена не будет
print('Привет, мир!')
"""
# Следует заметить, что этот фрагмент кода не игнорируется интерпретатором, поскольку он не является комментарием. В
# результате выполнения такого фрагмента будет создан объект строкового типа. Инструкции внутри утроенных кавычек
# выполняться не станут, поскольку интерпретатор сочтет их простым текстом. Такие строки являются строками
# документирования, а не комментариями.


# 1.5 Дополнительные возможности IDLE
print('Дополнительные возможности IDLE:')
# Поскольку в процессе изучения материала этой книги в качестве редактора мы будем использовать IDLE, рассмотрим
# дополнительные возможности этой среды разработки. Как вы уже знаете, в окне Python Shell символы >>> означают
# приглашение ввести команду.
# Введя команду, нажимаем клавишу <Enter> - на следующей строке сразу отобразится результат (при условии, что
# инструкция возвращает значение), а далее - приглашение для ввода новой команды. При вводе многострочной команды после
# нажатия клавиши <Enter> редактор автоматически вставит отступ и будет ожидать дальнейшего ввода. Чтобы сообщить
# редактору о конце ввода команды, необходимо дважды нажать клавишу <Enter>:
for n in range(1, 3):
    print(n)
# В предыдущем разделе мы выводили строку 'Привет, мир!' с помощью функции print().
# В окне Python Shell это делать не обязательно - мы можем просто ввести строку и нажать клавишу <Enter> для получения
# результата:
# 'Привет, мир!'
# Обратите внимание на то, что строки выводятся в апострофах. Этого не произойдет, если выводить строку с помощью
# функции print():
print('Привет, мир!')
# Учитывая возможность получить результат сразу после ввода команды, окно Python Shell можно использовать для изучения
# команд, а также в качестве многофункционального калькулятора:
print(12 * 32 + 54)
# Результат вычисления последней инструкции сохраняется в переменной _ (одно подчеркивание).
# Это позволяет производить дальнейшие расчеты без ввода предыдущего результата. Вместо него достаточно ввести символ
# подчеркивания:
print(125 * 3)   # Умножение
# print(_ + 50)  # Сложение. Эквивалентно 375 + 50
# print(_ / 5)   # Деление. Эквивалентно 425 / 5
# При вводе команды можно воспользоваться комбинацией клавиш <Ctrl>+<Пробел>. В результате будет отображен список, из
# которого можно выбрать нужный идентификатор. Если при открытом списке вводить буквы, то показываться будут
# идентификаторы, начинающиеся с этих букв. Выбирать идентификатор необходимо с помощью клавиш <стрелка вверх> и
# <стрелка вниз>. После выбора не следует нажимать клавишу <Enter>, иначе это приведет к выполнению инструкции, просто
# вводите инструкцию дальше, а список закроется. Такой же список будет автоматически появляться (с некоторой задержкой)
# при обращении к атрибутам объекта или модуля после ввода точки. Для автоматического завершения идентификатора после
# ввода его первых букв можно воспользоваться комбинацией клавиш <Alt>+</>. При каждом последующем нажатии этой
# комбинации будет вставляться следующий идентификатор. Эти две комбинации клавиш очень удобны, если вы забыли, как
# пишется слово, или хотите, чтобы редактор закончил его за вас.
# При необходимости повторно выполнить ранее введенную инструкцию, ее приходится набирать заново. Можно, конечно,
# скопировать инструкцию, а затем вставить, но, как вы можете сами убедиться, в контекстном меню нет пунктов Сору
# (Копировать) и Paste (Вставить), - они расположены в меню Edit, а постоянно выбирать пункты из этого меню очень
# неудобно. Одним из решений проблемы является использование комбинации "горячих" клавиш <Ctrl>+<C> (Копировать) и
# <Ctrl>+<V> (Вставить). Комбинации эти стандартны для Windows, и вы наверняка их уже использовали ранее. Но,
# опять-таки, прежде чем скопировать инструкцию, ее предварительно необходимо выделить. Редактор IDLE избавляет нас от
# таких лишних действий и предоставляет комбинацию клавиш <Alt>+<N> - для вставки первой введенной инструкции, а также
# комбинацию <Alt>+<P> - для вставки последней инструкции. Каждое последующее нажатие этих комбинаций будет вставлять
# следующую (или предыдущую) инструкцию. Для еще более быстрого повторного ввода инструкции следует предварительно
# ввести ее первые буквы - в таком случае перебираться будут только инструкции, начинающиеся с этих букв.


# 1.6 Вывод результатов работы программы
print('Вывод результатов работы программы:')
# Вывести результаты работы программы можно с помощью функции print(). Функция имеет следующий формат:
# print([<Объекты>][, sep=' '][, end='\n'][, file=sys.stdout] [, flush=False])
# Функция print() преобразует объект в строку и посылает ее в стандартный вывод stdout. С помощью параметра file можно
# перенаправить вывод в другое место, например в файл. При этом, если параметр flush имеет значение True, выводимые
# значения будут принудительно записаны в файл. Перенаправление вывода мы подробно рассмотрим при изучении файлов.
# print() - функция преобразует объект в строку и посылает его в стандартный вывод stdout.
# После вывода строки автоматически добавляется символ перевода строки.
print('Строка 1')
print('Строка 2')
# Если необходимо результат вывести на той же строке, то в функции print() данные указываются через запятую в первом
# параметре.
print('Строка 1', 'Строка 2')
# Как видно из примера, между выводимыми строками автоматически вставляется пробел.
# С помощью параметра sep можно указать другой символ, например дефис с пробелами.
print('Строка 3', 'Строка 4', sep=' - ')
# Или вывести строки без пробела между ними.
print('Строка 5', 'Строка 6', sep='')
# С помощью параметра end можно заменить символ окончания строки, на любой из доступных и продолжить вывод на той же
# строке. Например, символом пробела.
print('Строка 7', 'Строка 8', end=' ')
print('Строка 9')
# Если необходимо вставить символ перевода строки, то функция print() указывается без параметров.
for n in range(1, 5):
    print(n, end=' ')
print()
print('Это текст на новой строке')
# Для вывода нескольких строк текста или большого блока текста, их следует указать в тройных кавычках. При таком выводе
# текст сохранит своё форматирование.
print('''Строка 10
Строка 11
Строка 12''')
# Для вывода результатов работы вместо print() можно использовать метод write() объекта sys.stdout:
# Подключение модуля sys(должно быть в начале файла)
# import sys
# Или
# from sys import stdout
# sys.stdout.write('Строка 13\n')  # Вывод строки
# Или
stdout.write('Строка 13\n')  # Вывод строки
# Метод write() не вставляет символ перевода строки. Поэтому при необходимости его необходимо добавить с помощью символа
# \n в конец строки
# sys.stdout.write('Строка 14\n')  # Выводим строку, где \n символ перевода строки
# sys.stdout.write('Строка 15\n')
# Или
stdout.write('Строка 14\n')  # Выводим строку, где \n символ перевода строки
stdout.write('Строка 15\n')


# 1.7 Ввод данных
print('Ввод данных:')
# Для ввода данных предназначена функция input(), которая получает данные со стандартного ввода stdin.
# Функция имеет следующий формат:
# [<Значение> =  ] input([<Сообщение>])
# Переделаем нашу первую программу так, чтобы она здоровалась не со всем миром, а только с нами (test_00006.py).
# При использовании функции input() следует учитывать, что при достижении конца файла или при нажатии комбинации клавиш
# <Ctrl>+<Z>, а затем клавиши <Enter>, генерируется исключение EOFError. Если не предусмотреть обработку исключения, то
# программа аварийно завершится. Обработать исключение можно следующим образом:
# try:
#     s = input("Введите данные: ")
#     print(s)
# except EOFError:
#     print("Обработали исключение EOFError")
# Тогда, если внутри блока try возникнет исключение EOFError, управление будет передано в блок except. После исполнения
# инструкций в блоке except программа нормально продолжит работу.
# Передать данные можно в командной строке, указав их после имени файла программы. Такие данные доступны через список
# argv модуля sys. Первый элемент списка argv будет содержать название файла запущенной программы, а последующие
# элементы - переданные данные. Для примера создадим файл (test_00007.py).


# 1.8 Доступ к документации
print('Доступ к документации:')
# help() -  функция для отображения документации.
# С помощью help() можно получить документацию не только по конкретной функции, но и по всему модулю сразу. Для этого
# предварительно этот модуль необходимо подключить.
# Подключение модуля builtins(должно быть в начале файла)
# import builtins
# help(builtins)
# При рассмотрении комментариев мы говорили, что часто для комментирования большого фрагмента кода используются
# утроенные кавычки или утроенные апострофы. Такие строки не являются комментариями в полном смысле этого слова. Вместо
# комментирования фрагмента создается объект строкового типа, который сохраняется в атрибуте __doc__. Функция help()
# при составлении документации получает информацию из этого атрибута. Такие строки называются строками документирования.
# В качестве примера создадим файл (test_00008.py).
# Теперь подключим этот модуль и выведем содержимое строк документирования. Все эти действия выполняет код из
# (test_00009.py).
# Теперь получим содержимое строк документирования с помощью атрибута __doc__. Как это делается, показывает код из
# (test_00010.py).
# Получить список всех идентификаторов внутри модуля позволяет функция dir(). Пример ее использования показывает код
# из (test_00011.py).
# dir() - функция позволяет получить список всех идентификаторов в модуле.
# print(dir(builtins))
# Функция dir() может не принимать параметров вообще. В этом случае возвращается список идентификаторов текущего модуля:
# print(dir())


# 1.9 Утилита pip: установка дополнительных библиотек
print('Утилита pip: установка дополнительных библиотек:')
# Интерпретатор Python поставляется с богатой стандартной библиотекой, реализующую в частности, работу с файлами,
# шифрование, архивирование, обмен данными по сети и пр. Однако такие операции, как обработка графики, взаимодействие с
# базами данных SQLite, MySQL и многое другое она не поддерживает, и для их выполнения нам придется устанавливать
# всевозможные дополнительные библиотеки.
# В настоящее время процесс установки дополнительных библиотек в Python исключительно прост. Нам достаточно
# воспользоваться имеющейся в комплекте поставки Python утилитой pip, которая самостоятельно найдет запрошенную нами
# библиотеку в интернет-хранилище (репозитории) PyPI (Python Package Index, реестр пакетов Python), загрузит
# дистрибутивный пакет с этой библиотекой, совместимый с установленной версией Python, и установит ее. Если
# инсталлируемая библиотека требует для работы другие библиотеки, они также будут установлены.
# Все устанавливаемые таким образом дополнительные библиотеки записываются по пути <Путь, по которому установлен
# Python>\Lib\site-packages.
# Помимо этого, утилита pip позволит нам просмотреть список уже установленных дополнительных библиотек, получить
# сведения о выбранной библиотеке и удалить ненужную библиотеку.
# Для использования утилиты pip в командной строке следует набрать команду следующего формата:
# pip <Команда и ее опции> <Универсальные опции>
# Параметр <Команда и ее опции> указывает, что должна сделать утилита: установить библиотеку, вывести список библиотек,
# предоставить сведения об указанной библиотеке или удалить ее. Параметр <Универсальные опции> задает дополнительные
# настройки для самой утилиты и действует на все поддерживаемые ей команды.
# Далее приведен сокращенный список поддерживаемых утилитой pip команд вместе с их собственными опциями, а также и
# универсальных опций, включающий наиболее востребованные из таковых. Полный список всех команд утилиты pip можно
# получить, воспользовавшись командой help и опцией -h.
# Итак, утилита pip поддерживает следующие наиболее полезные нам команды:
# install - установка указанной библиотеки. Формат этой команды таков:
# pip install [<Опции>] <Название библиотеки>
# Если в параметре <Опции> не указана ни одна из них (см. далее), утилита просто загрузит и установит библиотеку с
# названием, заданным в параметре <Название библиотеки>. Если такая библиотека уже установлена, ничего не произойдет.
# Пример установки библиотеки Pillow:
# pip install pillow
# Доступные опции:
# -U (или --upgrade) - обновление библиотеки с заданным названием до актуальной версии, имеющейся в репозитории PyPI.
# Обновляем библиотеку Pillow:
# pip install -U pillow
# --force-reinstall - выполняет полную переустановку заданной библиотеки. Обычно используется вместе с опцией -U.
# В качестве параметра <Название библиотеки> также можно использовать конструкцию такого формата (кавычки обязательны):
# "<Название библиотеки><Оператор сравнения><Номер версии>"
# В качестве параметра <Оператор сравнения> можно использовать следующие символы и их комбинации:
# <  - меньше;
# >  - больше;
# <= - меньше или равно;
# >= - больше или равно;
# == - равно.
# Пример установки библиотеки Pillow версии 5.0.0 или более новой:
# pip install "pillow>=5.0.0"
# list - вывод списка установленных библиотек с указанием их версий в круглых скобках. Формат команды:
# pip list [<Опции>]
# pip list
# У авторов было выведено:
# Pillow (5.0.0)
# pip (9.0.1)
# setuptools (38.4.0)
# Единственная доступная здесь опция: --format=<Формат вывода>, задающая формат вывода. В качестве параметра <Формат
# вывода> можно указать legacy (вывод обычным списком, как было показано в примере ранее, это формат вывода по
# умолчанию) или columns (вывод в виде таблицы). Вот пример вывода списка установленных библиотек, оформленного в виде
# таблицы:
# pip list --format=columns
# У авторов было выведено:
# Package    Version
# Pillow     5.0.0
# pip        9.0.1
# setuptools 38.4.0
# Изначально в комплекте поставки Python уже присутствуют две библиотеки такого рода: pip, реализующая функциональность
# одноименной утилиты, и setuptools, предоставляющая специфические инструменты, которые помогают устанавливать
# дополнительные библиотеки.
# show - вывод сведений об указанной библиотеке. Формат команды:
# pip show [<Опции>] <Название библиотеки>
# Выводятся название библиотеки, ее версия, краткое описание, интернет-адрес «домашнего» сайта, имя разработчика, его
# адрес электронной почты, название лицензии для распространения библиотеки, путь, по которому она установлена, и
# список библиотек, требующихся ей для работы (если таковые есть). Для примера посмотрим сведения о Pillow:
# pip show pillow
# Вывод:
# Name: Pillow
# Version: 5.0.0
# Summary: Python Imaging Library (Fork)
# Home-page: https://python-pillow.org
# Author: Alex Clark (Fork Author)
# Author-email: aclark@aclark.net
# License: Standard PIL License
# Location: c:\python36\lib\site-packages
# Requires:
# Единственная доступная опция: -f (или --files), которая указывает утилите pip дополнительно вывести список всех
# файлов, составляющих библиотеку. Вот пример вывода сведений о библиотеке Pillow, включая перечень составляющих ее
# файлов:
# pip show -f pillow
# uninstall - удаление указанной библиотеки. Формат команды:
# pip uninstall [<Опции>] <Название библиотеки>
# Сначала будет выведен список всех файлов, составляющих удаляемую библиотеку, и вопрос, действительно ли пользователь
# хочет удалить ее. Чтобы подтвердить удаление, нужно ввести букву у, чтобы отменить его - п, после чего в любом случае
# нажать клавишу <Enter>. Вот пример удаления библиотеки Pillow:
# pip uninstall pillow
# Из всех доступных опций для нас будет полезна только -у (или --yes), подавляющая вывод вопроса на удаление
# библиотеки, а также списка составляющих ее файлов. Вот пример удаления библиотеки pillow без вывода запроса:
# pip uninstall -у pillow
# help - вывод справочных сведений об утилите pip, поддерживаемых ею командах и опциях. Формат команды:
# pip help [<Команда>]
# Если <Команда> не указана, будет выведен список всех поддерживаемых утилитой pip команд и универсальных опций:
# pip help
# Того же самого результата можно достичь, просто запустив в командной строке утилиту pip без всяких параметров.
# Если <Команда> указана, будет выведена справочная информация об этой команде и всех ее опциях, а также перечень
# универсальных опций. В качестве примера выведем описание команды install:
# pip help install
# Теперь рассмотрим список поддерживаемых pip универсальных опций:
# --proxy - задает proxy-сервер, через который будет выполняться доступ к Интернету. Формат использования:
# --proxy=[<Имя пользователя>:<Пароль пользователях>@]<Интернет-адрес>:<Номер порта>
# Пример:
# pip install pillow - proxy=user123:pAsSwOrD@192.168.1.1:3128
# -v (или --verbose) - вывод более подробных сведений о выполняемых утилитой pip действиях. Также может быть указана
# дважды или трижды, тем самым задавая вывод еще более подробных и самых подробных сведений соответственно:
# pip show pillow -v
# pip install pillow -v -v -v
# Дает эффект не со всеми командами pip.
# -q (или --quiet) - вывод менее подробных сведений о выполняемых утилитой pip действиях. Также может быть указана
# дважды или трижды, тем самым задавая вывод еще менее подробных и минимальных сведений соответственно:
# pip show pillow -q
# pip install pillow -q -q -q
# Дает эффект не со всеми командами pip.
# -h (или --help) - вывод справочных сведений о заданной команде pip, всех ее опциях и универсальных опциях pip (то
# есть дает эффект, аналогичный отдаче описанной ранее команды help с указанием команды, для которой нужно вывести
# справку). Для примера выведем сведения о команде uninstall:
# pip uninstall -h
