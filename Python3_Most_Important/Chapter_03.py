#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from decimal import Decimal  # Подключение функции Decimal() из модуля decimal

# Глава 3
# Операторы
print('Операторы:')
# Операторы позволяют произвести с данными определенные действия. Например, операторы присваивания служат для сохранения
# данных в переменной, математические операторы позволяют выполнить арифметические вычисления, а оператор конкатенации
# строк служит для соединения двух строк в одну.


# 3.1 Математические операторы
print('Математические операторы:')
# Математические операторы позволяют производить операции над числами:
# + - Сложение:
print('Сложение:')
print(10 + 5)      # Целые числа
print(12.4 + 5.2)  # Вещественные числа
print(10 + 12.4)   # Целые и вещественные числа
# - - Вычитание:
print('Вычитание:')
print(10 - 5)      # Целые числа
print(12.4 - 5.2)  # Вещественные числа
print(12 - 5.2)    # Целые и вещественные числа
# * - Умножение:
print('Умножение:')
print(10 * 5)      # Целые числа
print(12.4 * 5.2)  # Вещественные числа
print(10 * 5.2)    # Целые и вещественные числа
# / - Деление. Результатом деления всегда является вещественное число, даже если производится деление целых чисел.
print('Деление:')
print(10 / 5)      # Деление целых чисел без остатка
print(10 / 3)      # Деление целых чисел с остатком
print(10.0 / 5.0)  # Деление вещественных чисел
print(10.0 / 3.0)  # Деление вещественных чисел
print(10 / 5.0)    # Деление целого числа на вещественное
print(10.0 / 5)    # Деление вещественного числа на целое
# // - Деление с округлением вниз. Вне зависимости от типа чисел остаток отбрасывается.
print('Деление с округлением вниз:')
print(10 // 5)      # Деление целых чисел без остатка
print(10 // 3)      # Деление целых чисел с остатком
print(10.0 // 5.0)  # Деление вещественных чисел
print(10.0 // 3.0)  # Деление вещественных чисел
print(10 // 5.0)    # Деление целого числа на вещественное
print(10 // 3.0)    # Деление целого числа на вещественное
print(10.0 // 5)    # Деление вещественного числа на целое
print(10.0 // 3)    # Деление вещественного числа на целое
# % - Остаток от деления:
print('Остаток от деления:')
print(10 % 5)      # Деление целых чисел без остатка
print(10 % 3)      # Деление целых чисел с остатком
print(10.0 % 5.0)  # Операция над вещественными числами
print(10.0 % 3.0)  # Операция над вещественными числами
print(10 % 5.0)    # Операция над целыми и вещественными числами
print(10 % 3.0)    # Операция над целыми и вещественными числами
print(10.0 % 5)    # Операция над целыми и вещественными числами
print(10.0 % 3)    # Операция над целыми и вещественными числами
# ** - Возведение в степень:
print('Возведение в степень:')
print(10 ** 2)
print(10.0 ** 2)
# Унарный минус(-) и унарный плюс(+):
print('Унарный минус(-) и унарный плюс(+):')
print(+10)
print(+10.0)
print(-10)
print(-10.0)
print(-(-10))
print(-(-10.0))
# Операции над числами разных типов возвращают число, имеющее более сложный тип из типов, участвующих в операции. Целые
# числа имеют самый простой тип, далее идут вещественные числа и самый сложный тип - комплексные числа. Таким образом,
# если в операции участвуют целое число и вещественное, то целое число будет автоматически преобразовано в вещественное
# число, а затем произведена операция над вещественными числами. Результатом этой операции станет вещественное число.
# При выполнении операций над вещественными числами следует учитывать ограничения точности вычислений.
print(0.3 - 0.1 - 0.1 - 0.1)
# Если необходимо производить операции с фиксированной точностью, то следует использовать модуль decimal:
print(Decimal('0.3') - Decimal('0.1') - Decimal('0.1') - Decimal('0.1'))


# 3.2 Двоичные операторы
print('Двоичные операторы:')
# Двоичные операторы предназначены для манипуляции отдельными битами. Язык Python поддерживает следующие побитовые
# операторы:
# ~ - Двоичная инверсия. Значение каждого бита заменяется на противоположное:
print('Двоичная инверсия:')
x = 100  # 01100100
print(x)
x = ~x   # 10011011
print(x)
# & - Двоичное И:
print('Двоичное И:')
x = 100    # 01100100
y = 75     # 01001011
z = x & y  # 01000000
print('{0:b} & {1:b} = {2:b}'.format(x, y, z))
# | - Двоичное ИЛИ:
print('Двоичное ИЛИ:')
x = 100    # 01100100
y = 75     # 01001011
z = x | y  # 01101111
print('{0:b} | {1:b} = {2:b}'.format(x, y, z))
# ^ - Двоичное исключающее ИЛИ:
print('Двоичное исключающее ИЛИ:')
x = 100  # 01100100
y = 250  # 11111010
z = x ^ y  # 10011110
print('{0:b} ^ {1:b} = {2:b}'.format(x, y, z))
# << - Сдвиг влево - сдвигает двоичное представление числа влево на один или более разрядов и заполняет разряды справа
# нулями:
print('Сдвиг влево:')
x = 100     # 01100100
print(x)
y = x << 1  # 11001000
print(y)
z = y << 1  # 10010000
print(z)
k = z << 2  # 01000000
print(k)
# >> - Сдвиг вправо - сдвигает двоичное представление числа вправо на один или более разрядов и заполняет разряды слева
# нулями, если число положительное:
print('Сдвиг вправо:')
x = 100     # 01100100
print(x)
y = x >> 1  # 00110010
print(y)
z = y >> 1  # 00011001
print(z)
k = z >> 2  # 00000110
print(k)
# Если число отрицательное, то разряды слева заполняются единицами:
x = -127    # 10000001
print(x)
y = x >> 1  # 11000000
print(y)
z = y >> 2  # 11110000
print(z)
k = z << 1  # 11100000
print(k)
m = k >> 1  # 11110000
print(m)


# 3.3 Операторы для работы с последовательностями
print('Операторы для работы с последовательностями:')
# Для работы с последовательностями предназначены следующие операторы:
# + - Конкатенация:
print('Конкатенация:')
print('Строка1' + 'Строка2')  # Конкатенация строк
print([1, 2, 3] + [4, 5, 6])  # Конкатенация списков
print((1, 2, 3) + (4, 5, 6))  # Конкатенация кортежей
# * - Повторение:
print('Повторение:')
print('s' * 20)    # Повторение строк
print([1, 2] * 3)  # Повторение списков
print((1, 2) * 3)  # Повторение кортежей
# in - Проверка на вхождение. Если элемент входит в последовательность, то возвращается логическое значение True:
print('Проверка на вхождение:')
print('Строка' in 'Строка для поиска')   # Строки
print('Строка2' in 'Строка для поиска')  # Строки
print(2 in [1, 2, 3], 4 in [1, 2, 3])    # Списки
print(2 in (1, 2, 3), 6 in (1, 2, 3))    # Кортежи
# not in - Проверка на не вхождение. Если элемент не входит в последовательность, возвращается True:
print('Проверка на не вхождение:')
print('Строка' not in 'Строка для поиска')     # Строки
print('Строка2' not in 'Строка для поиска')    # Строки
print(2 not in [1, 2, 3], 4 not in [1, 2, 3])  # Списки
print(2 not in (1, 2, 3), 6 not in (1, 2, 3))  # Кортежи


# 3.4 Операторы присваивания
print('Операторы присваивания:')
# Операторы присваивания предназначены для сохранения значения в переменной. Операторы присваивания, доступные в Python:
# = - Присваивает переменной значение:
print('Присваивает переменной значение:')
x = 5
print(x)
# += - Увеличивает значение переменной на указанную величину:
print('Увеличивает значение переменной на указанную величину:')
x = 5
print(x)
x += 10  # Эквивалентно х = х + 10
print(x)
# Для последовательностей оператор += производит конкатенацию:
s = 'Стр'
print(s)
s += 'ока'
print(s)
# -= - Уменьшает значение переменной на указанную величину:
print('Уменьшает значение переменной на указанную величину:')
x = 10
print(x)
x -= 5  # Эквивалентно х = х - 5
print(x)
# *= - Умножает значение переменной на указанную величину:
print('Умножает значение переменной на указанную величину:')
x = 10
print(x)
x *= 5  # Эквивалентно х = х * 5
print(x)
# Для последовательностей оператор *= производит повторение:
s = '*'
print(s)
s *= 20
print(s)
# /= - Делит значение переменной на указанную величину:
print('Делит значение переменной на указанную величину:')
x = 10
print(x)
x /= 3    # Эквивалентно x = x / 3
print(x)
y = 10.0
print(y)
y /= 3.0  # Эквивалентно y = y / 3.0
print(y)
# //= - Деление с округлением вниз и присваиванием:
print('Деление с округлением вниз и присваиванием:')
x = 10
print(x)
x //= 3    # Эквивалентно x = x // 3
print(x)
y = 10.0
print(y)
y //= 3.0  # Эквивалентно y = y // 3.0
print(y)
# %= - Деление по модулю и присваивание:
print('Деление по модулю и присваивание:')
x = 10
print(x)
x %= 2  # Эквивалентно x = x % 2
print(x)
y = 10
print(y)
y %= 3  # Эквивалентно y = y % 3
print(y)
# **= - Возведение в степень и присваивание:
print('Возведение в степень и присваивание:')
x = 10
print(x)
x **= 2  # Эквивалентно x = x ** 2
print(x)


# 3.5 Приоритет выполнения операторов
print('Приоритет выполнения операторов:')
# Операторы в порядке убывания приоритета:
# 1. -х, +х, ~х, ** - унарный минус, унарный плюс, двоичная инверсия, возведение в степень. Если унарные операторы
# расположены слева от оператора **, то возведение в степень имеет больший приоритет, а если справа - то меньший.
# Например, выражение:
# -10 ** -2
# эквивалентно следующей расстановке скобок:
# -(10 ** (-2))
# 2. *, %, /, // - умножение (повторение), остаток от деления, деление, деление с округлением вниз.
# 3. +, - - сложение (конкатенация), вычитание.
# 4. <<, >> - двоичные сдвиги.
# 5. & - двоичное И.
# 6. ^ - двоичное исключающее ИЛИ.
# 7. | - двоичное ИЛИ.
# 8. =, +=, -=, *=, /=, //=, %= , **= - присваивание.
