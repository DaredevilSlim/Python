#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Глава 2
print('Глава 2')
# Трюки Python
print('Трюки Python')

# Поиск самых высокооплачиваемых работников с помощью спискового включения
print('Поиск самых высокооплачиваемых работников с помощью спискового включения')
# В данном разделе вы познакомитесь с прекрасной, очень эффективной и полезной возможностью Python для создания списков:
# списковым включением (list comprehension). Оно пригодится нам во множестве однострочников далее в книге.

# Общее описание
print('Общее описание')
# Представьте, что вы работаете в отделе кадров большой компании и вам нужно найти всех сотрудников, зарабатывающих по
# крайней мере 100 000 долларов в год. Выходные результаты должны представлять собой список кортежей, каждый из которых
# состоит из двух значений: имени сотрудника и его годовой зарплаты. Ниже представлен соответствующий код:
employees = {'Alice': 100000, 'Bob': 99817, 'Carol': 122908, 'Frank': 88123, 'Eve': 93121}
top_earners = []
for key, val in employees.items():
    if val >= 100000:
        top_earners.append((key,val))
print(top_earners)  # [('Alice', 100000), ('Carol', 122908)]
# И хотя код работает правильно, существует более простой и намного более лаконичный, а значит, и удобочитаемый способ
# получить тот же результат. При прочих равных условиях решение, занимающее меньше строк, будет понятнее для читающего
# код. В Python существует замечательный способ создания новых списков: списковое включение.
# Оно описывается простой формулой:
# [выражение + контекст]
# Внешние квадратные скобки указывают, что результат представляет собой новый список. Контекст указывает, какие элементы
# списка необходимо взять. Выражение описывает способ модификации элементов списка перед добавлением результата в
# список. Пример выглядит так:
# [x * 2 for x in range(3)]
# Выделенная жирным шрифтом часть, for x in range(3), представляет собой контекст, а остальная часть, x * 2,
# — выражение. Выражение удваивает значения 0, 1, 2, сгенерированные контекстом. Таким образом, результат спискового
# включения представляет собой следующий список:
# [0, 2, 4]
# Как выражение, так и контекст могут быть произвольной степени сложности. Выражение может представлять собой функцию от
# любой описанной в контексте переменной и выполнять любые вычисления — и даже вызывать внешние функции. Задача
# выражения — модифицировать каждый из элементов списка перед добавлением его в новый список. Контекст может состоять из
# одной или нескольких переменных, описанных с помощью одного или нескольких вложенных циклов for. Можно также
# ограничить контекст, задействовав операторы if. В данном случае новое значение добавляется в список только при
# соблюдении заданного пользователем условия.
# Списковое включение лучше всего пояснить на примере. Внимательно изучите следующие примеры, и вы поймете, что оно
# собой представляет:
print([x for x in range(5)])  # [0, 1, 2, 3, 4]
# Выражение: тождественная функция (не меняет контекст переменной x).
# Контекст: переменная контекста x принимает все значения, возвращаемые функцией range: 0, 1, 2, 3, 4.
print([(x, y) for x in range(3) for y in range(3)])
# [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
# Выражение: создает новый кортеж из переменных контекста x и y.
# Контекст: переменная контекста x проходит в цикле по всем значениям, возвращаемым функцией range (0, 1, 2);
# то же делает и переменная контекста y. Эти два цикла for — вложенные, вследствие чего переменная контекста y повторяет
# итерации своего цикла для каждого из значений переменной контекста x. Таким образом, получается 3 × 3 = 9 сочетаний
# переменных контекста.
print([x ** 2 for x in range(10) if x % 2 > 0])  # [1, 9, 25, 49, 81]
# Выражение: функция возведения в квадрат переменной контекста x.
# Контекст: переменная контекста x проходит в цикле по всем значениям, возвращаемым функцией range — 0, 1, 2, 3, 4, 5,
# 6, 7, 8, 9, — но только нечетным, то есть когда x % 2 > 0.
print([x.lower() for x in ['I', 'AM', 'NOT', 'SHOUTING']])  # ['i', 'am', 'not', 'shouting']
# Выражение: строковая функция приведения к нижнему регистру переменной контекста x.
# Контекст: переменная контекста x проходит в цикле по всем строковым значениям в списке: 'I', 'AM', 'NOT', 'SHOUTING'.
# Теперь вы сможете понять, что происходит во фрагменте кода, который будет показан ниже.

# Код
print('Код')
# Рассмотрим уже обсуждавшуюся ранее задачу с зарплатами сотрудников:
# по ассоциативному массиву со строковыми ключами и целочисленными значениями создать новый список из кортежей (ключ,
# значение), таких, что соответствующее ключу значение больше или равно 100 000.
# Однострочное решение для спискового включения
# Данные
employees = {'Alice': 100000, 'Bob': 99817, 'Carol': 122908, 'Frank': 88123, 'Eve': 93121}
# Однострочник
top_earners = [(k, v) for k, v in employees.items() if v >= 100000]
# Результат
print(top_earners)
# Каковы же будут результаты выполнения этого фрагмента кода?

# Принцип работы
print('Принцип работы')
# Рассмотрим этот однострочник подробнее.
top_earners = [(k, v) for k, v in employees.items() if v >= 100000]
# Выражение: создает простой кортеж (ключ, значение) для переменных контекста k и v.
# Контекст: метод ассоциативного массива dict.items() обеспечивает проход переменной контекста k в цикле по всем ключам
# ассоциативного массива, а переменной контекста v — в цикле по соответствующим переменной контекста k значениям, но
# только если значение переменной контекста v равно или больше 100 000, в соответствии с условием if.
# Результат выполнения этого однострочника выглядит следующим образом:
print(top_earners)  # [('Alice', 100000), ('Carol', 122908)]
# В этой простой однострочной программе мы познакомились с важным понятием спискового включения. Такие включения
# используются во многих местах данной книги, поэтому хорошо разберитесь с примерами в текущем разделе, прежде чем
# читать дальше.

# Поиск информативных слов с помощью спискового включения
print('Поиск информативных слов с помощью спискового включения')
# В этом однострочнике мы еще более углубимся в изучение обладающей большими возможностями функциональности списковых
# включений.

# Общее описание
print('Общее описание')
# Поисковые системы ранжируют текстовую информацию по степени соответствия запросу пользователя. Для этого поисковые
# системы анализируют содержимое текста, в котором необходимо произвести поиск. Любой текст состоит из слов. В одних
# содержится немало информации о содержимом текста, а в других — нет. Примеры первых слов — white, whale, Captain, Ahab
# (узнали, откуда это?). Примеры слов второго типа — is, to, as, the, a и how, поскольку они содержатся в большинстве
# текстов. При реализации поисковых систем часто отфильтровывают слова, не несущие особого значения.
# Простейший эвристический подход — отфильтровывать все слова из трех или менее букв.
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#

