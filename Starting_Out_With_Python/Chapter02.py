#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 2.3 Вывод данных на экран при помощи функции print
print('2.3 Вывод данных на экран при помощи функции print')
# Функция print используется для вывода на экран выходных данных в программе Python.
# Функция — это фрагмент заранее написанного кода, который выполняет некую операцию. Python имеет многочисленные
# встроенные функции, которые выполняют различные операции. Возможно, самой фундаментальной встроенной функцией является
# функция печати print, которая показывает выходные данные на экране. Вот пример инструкции, которая исполняет функцию
# print:
print('Привет, мир!')
# Когда программисты исполняют функцию, они говорят, что вызывают функцию.

# Строковые данные и строковые литералы
print('Строковые данные и строковые литералы')
# В программном коде Python строковые литералы должны быть заключены в знаки кавычек. Как отмечалось ранее, знаки
# кавычек просто отмечают, где строковые данные начинаются и заканчиваются. В Python можно заключать строковые литералы
# в одинарные кавычки (') либо двойные кавычки ("). Если требуется, чтобы строковый литерал содержал одинарную кавычку
# (апостроф), то можно заключить строковый литерал в двойные кавычки.
# Python позволяет заключать строковые литералы в тройные кавычки (""" либо '''). Строки, которые заключены в тройные
# кавычки, внутри могут содержать одинарные и двойные кавычки. Тройные кавычки используются для заключения многострочных
# строковых данных, для которых одинарные и двойные кавычки не могут применяться.


# Комментарии
print('Комментарии')
# Комментарии — это описательные пояснения, которые документируют строки программы или ее разделы. Комментарии являются
# частью программы, но интерпретатор Python их игнорирует. Они предназначены для людей, которые, возможно, будут читать
# исходный код.
# В Python комментарий начинается с символа решетки #. Когда интерпретатор Python видит символ #, он игнорирует все, что
# находится между этим символом и концом строки кода.
# В своем коде программисты чаще всего используют концевые комментарии. Концевой комментарий — это комментарий, который
# появляется в конце строки кода. Он обычно объясняет инструкцию, которая расположена в этой строке.


# Переменные
print('Переменные')
# Переменная — это имя, которое представляет место хранения в памяти компьютера.

# Создание переменных инструкцией присваивания
# Инструкция присваивания используется для создания переменной, которая будет ссылаться на порцию данных.
# Инструкция присваивания записывается в приведенном ниже общем формате:
# переменная = выражение
# Знак "равно" (=) называется оператором присваивания. В данном формате переменная — это имя переменной, а выражение —
# значение либо любая порция программного кода, которая в результате дает значение. После исполнения инструкции
# присваивания переменная, заданная слева от оператора =, будет ссылаться на значение, заданное справа от оператора =.
age = 25
print(age)
width = 10
print(width)
length = 5
print(length)
# В инструкции присваивания переменная, получающая присваиваемое значение, должна стоять с левой стороны от оператора =.
# В программе в файле variable_demo.py демонстрируется переменная. Строка 2 создает переменную с именем room (комната) и
# присваивает ей значение 503. Инструкции в строках 3 и 4 выводят сообщения. Обратите внимание, что строка 4 выводит
# значение, на которое ссылается переменная room.
# В программе в файле variable_demo2.py приведен пример кода, в котором используются две переменные. Строка 2 создает
# переменную с именем top_speed (предельная скорость), присваивая ей значение 160. Строка 3 создает переменную с именем
# distance (расстояние), присваивая ее значение 300.
# Переменную нельзя использовать, пока ей не будет присвоено значение. Если попытаться выполнить операцию с переменной,
# например напечатать ее, до того, как ей будет присвоено значение, то произойдет ошибка.
# Переменные в Python работают иначе, чем переменные в большинстве других языков программирования. Там переменная — это
# ячейка памяти, которая содержит значение. В этих языках,когда вы присваиваете значение переменной, оно сохраняется в
# выделенной для этой переменной ячейке памяти.
# В Python переменная — это ячейка памяти, которая содержит адрес другой ячейки памяти. Когда вы присваиваете значение
# переменной в Python, это оно хранится в отдельном от переменной месте. Переменная будет содержать адрес ячейки, в
# которой хранится значение. Вот почему в Python вместо того, чтобы говорить, что переменная "содержит" значение, мы
# говорим, что переменная "ссылается" на переменную.

# Правила именования переменных
# Хотя разрешается придумывать переменным свои имена, необходимо соблюдать правила.
# - В качестве имени переменной нельзя использовать одно из ключевых слов Python.
# - Имя переменной не может содержать пробелы.
# - Первый символ должен быть одной из букв от a до z, от A до Z либо символом подчеркивания (_).
# - После первого символа можно использовать буквы от a до z или от A до Z, цифры от 0 до 9 либо символы подчеркивания.
# - Символы верхнего и нижнего регистров различаются. Это означает, что имя переменной ItemsOrdered (ЗаказаноТоваров) не
# является тем же, что и itemsordered (заказанотоваров).
# В дополнение к соблюдению этих правил также всегда следует выбирать имена переменных, которые дают представление о
# том, для чего они используются.
# Примеры имен переменных:
# Имя переменной   Допустимое или недопустимое
# units_per_day    Допустимое.
# dayOfWeek        Допустимое.
# 3dGraph          Недопустимое. Имена переменных не могут начинаться с цифры.
# June1997         Допустимое.
# Mixture#3        Недопустимое. В именах переменных могут использоваться только буквы, цифры или символы подчеркивания.

# Вывод нескольких значений при помощи функции print
# Python позволяет выводить несколько значений одним вызовом функции print. Мы просто должны отделить значения друг от
# друга запятыми, как показано в программе в файле variable_demo3.py.

# Повторное присваивание значений переменным
# Переменные называются так потому, что во время работы программы они могут ссылаться на разные значения. Когда
# переменной присваивается значение, она будет ссылаться на это значение до тех пор, пока ей не будет присвоено другое
# значение. Например, в программе в файле variable_demo4.py инструкция в строке 3 создает переменную с именем roubles и
# присваивает ей значение 2.75. Затем инструкция в строке 8 присваивает переменной roubles другое значение — 99.95.
# Старое значение 2.75 по-прежнему находится в памяти компьютера, но оно больше не может использоваться, потому что на
# него переменная не ссылается. Когда переменная больше не ссылается на значение в памяти, интерпретатор Python
# автоматически его удаляет из памяти посредством процедуры, которая называется сборщиком мусора.

# Числовые типы данных и числовые литералы
# Поскольку разные типы чисел хранятся и обрабатываются по-разному, в Python используются типы данных с целью
# классификации значений в оперативной памяти. Когда в оперативной памяти хранится целое число, оно классифицируется как
# int, а когда в памяти хранится вещественное число, оно классифицируется как float.
# Когда интерпретатор Python считывает числовой литерал в коде программы, он определяет его тип данных согласно
# следующим правилам:
# - числовой литерал, который записан в виде целого числа без десятичной точки, имеет целочисленный тип int, например 7,
# 124 и -9;
# - числовой литерал, который записан с десятичной точкой, имеет вещественный тип float, например 1.5, 3.14159 и 5.0.
# В числовых литералах запрещено использовать обозначения денежных единиц, пробелов или запятых.

# Хранение строковых данных с типом str
# В дополнение к целочисленным типам данных int и вещественным типам данных float Python имеет тип данных str, который
# используется для хранения в оперативной памяти строковых данных. В программе в файлах string_variable.py показано, как
# строковые данные присваиваются переменным.

# Повторное присвоение переменной значения другого типа
# Следует учитывать, что в Python переменная — это просто имя, которое ссылается на порцию данных в оперативной памяти.
# Этот механизм упрощает вам, программисту, хранение и получение данных. Интерпретатор Python отслеживает создаваемые
# вами имена переменных и порции данных, на которые эти имена переменных ссылаются. Всякий раз, когда необходимо
# получить одну из этих порций данных, просто используется имя переменной, которое на эту порцию ссылается.
# Переменная в Python может ссылаться на значения любого типа. После того как переменной присвоено значение одного типа,
# ей можно заново присвоить значение другого типа.


# 2.6 Чтение входных данных с клавиатуры
print('2.6 Чтение входных данных с клавиатуры')
# Программы должны уметь считывать входные данные, набираемые пользователем на клавиатуре. Для этих целей мы будем
# использовать функции Python.
# Функция input читает порцию данных, которая была введена с клавиатуры, и возвращает эту порцию данных в качестве
# строкового значения назад в программу. Функцию input обычно применяют в инструкции присваивания, которая соответствует
# приведенному ниже общему формату:
# переменная = input(подсказка)
# В данном формате подсказка — это строковый литерал, который выводится на экран. Его предназначение — дать пользователю
# указание ввести значение. А переменная — это имя переменной, которая ссылается на данные, введенные на клавиатуре.
# В программе в файле string_input.py представлен законченный код, который использует функцию input для чтения двух
# строковых значений с клавиатуры.
# Мы помещаем пробел в конец каждого строкового значения, потому что функция input не выводит пробел автоматически после
# подсказки. Когда пользователь начинает набирать символы, они появляются на экране сразу после подсказки. Добавление в
# конец подсказки символа пробела позволяет визуально отделять подсказку на экране от вводимых пользователем данных.

# Чтение чисел при помощи функции input
# Функция input всегда возвращает введенные пользователем данные как строковые, даже если пользователь вводит числовые
# значения. Например, предположим, что вы вызываете функцию input, набираете число 72 и нажимаете клавишу <Enter>.
# Возвращенное из функции input значение будет строковым, '72'. Может возникнуть проблема, если вы захотите использовать
# это значение в математической операции. Математические операции могут выполняться только с числовыми значениями, а не
# строковыми.
# Функции преобразования данных
# Функция           Описание
# int(значение)     В функцию int() передается аргумент, и она возвращает значение аргумента, преобразованное в
#                   целочисленный тип int
# float(значение)   В функцию float() передается аргумент, и она возвращает значение аргумента, преобразованное в
#                   вещественный тип float
# В программе в файле input.py представлен законченный код, в котором используется функция input() для чтения значений
# строкового str, целочисленного int и вещественного float типов в качестве вводимых с клавиатуры данных.


# 2.7 Выполнение расчетов
print('2.7 Выполнение расчетов')
# Python имеет много операторов, которые используются для выполнения математических расчетов.
# Математические операторы Python
# Символ    Операция                Описание
# +         Сложение                Складывает два числа
# −         Вычитание               Вычитает одно число из другого
# *         Умножение               Умножает одно число на другое
# /         Деление                 Делит одно число на другое и выдает результат в качестве числа с плавающей точкой
# //        Целочисленное деление   Делит одно число на другое и выдает результат в качестве целого числа
# %         Остаток от деления      Делит одно число на другое и выдает остаток от деления
# **        Возведение в степень    Возводит число в степень
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#

