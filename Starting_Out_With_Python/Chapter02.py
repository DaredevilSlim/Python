#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 2.3 Вывод данных на экран при помощи функции print
print('2.3 Вывод данных на экран при помощи функции print')
# Функция print используется для вывода на экран выходных данных в программе Python.
# Функция — это фрагмент заранее написанного кода, который выполняет некую операцию. Python имеет многочисленные
# встроенные функции, которые выполняют различные операции. Возможно, самой фундаментальной встроенной функцией является
# функция печати print, которая показывает выходные данные на экране. Вот пример инструкции, которая исполняет функцию
# print:
print('Привет, мир!')
# Когда программисты исполняют функцию, они говорят, что вызывают функцию.

# Строковые данные и строковые литералы
print('Строковые данные и строковые литералы')
# В программном коде Python строковые литералы должны быть заключены в знаки кавычек. Как отмечалось ранее, знаки
# кавычек просто отмечают, где строковые данные начинаются и заканчиваются. В Python можно заключать строковые литералы
# в одинарные кавычки (') либо двойные кавычки ("). Если требуется, чтобы строковый литерал содержал одинарную кавычку
# (апостроф), то можно заключить строковый литерал в двойные кавычки.
# Python позволяет заключать строковые литералы в тройные кавычки (""" либо '''). Строки, которые заключены в тройные
# кавычки, внутри могут содержать одинарные и двойные кавычки. Тройные кавычки используются для заключения многострочных
# строковых данных, для которых одинарные и двойные кавычки не могут применяться.


# Комментарии
print('Комментарии')
# Комментарии — это описательные пояснения, которые документируют строки программы или ее разделы. Комментарии являются
# частью программы, но интерпретатор Python их игнорирует. Они предназначены для людей, которые, возможно, будут читать
# исходный код.
# В Python комментарий начинается с символа решетки #. Когда интерпретатор Python видит символ #, он игнорирует все, что
# находится между этим символом и концом строки кода.
# В своем коде программисты чаще всего используют концевые комментарии. Концевой комментарий — это комментарий, который
# появляется в конце строки кода. Он обычно объясняет инструкцию, которая расположена в этой строке.


# Переменные
print('Переменные')
# Переменная — это имя, которое представляет место хранения в памяти компьютера.

# Создание переменных инструкцией присваивания
# Инструкция присваивания используется для создания переменной, которая будет ссылаться на порцию данных.
# Инструкция присваивания записывается в приведенном ниже общем формате:
# переменная = выражение
# Знак "равно" (=) называется оператором присваивания. В данном формате переменная — это имя переменной, а выражение —
# значение либо любая порция программного кода, которая в результате дает значение. После исполнения инструкции
# присваивания переменная, заданная слева от оператора =, будет ссылаться на значение, заданное справа от оператора =.
age = 25
print(age)
width = 10
print(width)
length = 5
print(length)
# В инструкции присваивания переменная, получающая присваиваемое значение, должна стоять с левой стороны от оператора =.
# В программе в файле variable_demo.py демонстрируется переменная. Строка 2 создает переменную с именем room (комната) и
# присваивает ей значение 503. Инструкции в строках 3 и 4 выводят сообщения. Обратите внимание, что строка 4 выводит
# значение, на которое ссылается переменная room.
# В программе в файле variable_demo2.py приведен пример кода, в котором используются две переменные. Строка 2 создает
# переменную с именем top_speed (предельная скорость), присваивая ей значение 160. Строка 3 создает переменную с именем
# distance (расстояние), присваивая ее значение 300.
# Переменную нельзя использовать, пока ей не будет присвоено значение. Если попытаться выполнить операцию с переменной,
# например напечатать ее, до того, как ей будет присвоено значение, то произойдет ошибка.
# Переменные в Python работают иначе, чем переменные в большинстве других языков программирования. Там переменная — это
# ячейка памяти, которая содержит значение. В этих языках,когда вы присваиваете значение переменной, оно сохраняется в
# выделенной для этой переменной ячейке памяти.
# В Python переменная — это ячейка памяти, которая содержит адрес другой ячейки памяти. Когда вы присваиваете значение
# переменной в Python, это оно хранится в отдельном от переменной месте. Переменная будет содержать адрес ячейки, в
# которой хранится значение. Вот почему в Python вместо того, чтобы говорить, что переменная "содержит" значение, мы
# говорим, что переменная "ссылается" на переменную.

# Правила именования переменных
# Хотя разрешается придумывать переменным свои имена, необходимо соблюдать правила.
# - В качестве имени переменной нельзя использовать одно из ключевых слов Python.
# - Имя переменной не может содержать пробелы.
# - Первый символ должен быть одной из букв от a до z, от A до Z либо символом подчеркивания (_).
# - После первого символа можно использовать буквы от a до z или от A до Z, цифры от 0 до 9 либо символы подчеркивания.
# - Символы верхнего и нижнего регистров различаются. Это означает, что имя переменной ItemsOrdered (ЗаказаноТоваров) не
# является тем же, что и itemsordered (заказанотоваров).
# В дополнение к соблюдению этих правил также всегда следует выбирать имена переменных, которые дают представление о
# том, для чего они используются.
# Примеры имен переменных:
# Имя переменной   Допустимое или недопустимое
# units_per_day    Допустимое.
# dayOfWeek        Допустимое.
# 3dGraph          Недопустимое. Имена переменных не могут начинаться с цифры.
# June1997         Допустимое.
# Mixture#3        Недопустимое. В именах переменных могут использоваться только буквы, цифры или символы подчеркивания.

# Вывод нескольких значений при помощи функции print
# Python позволяет выводить несколько значений одним вызовом функции print. Мы просто должны отделить значения друг от
# друга запятыми, как показано в программе в файле variable_demo3.py.

# Повторное присваивание значений переменным
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#

