#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# 6 Файлы и исключения
print('6 Файлы и исключения')
# 6.1 Введение в файловый ввод и вывод
print('6.1 Введение в файловый ввод и вывод')
# Когда программе нужно сохранить данные для дальнейшего использования, она пишет эти данные в файл. Позднее их можно
# прочитать из файла.
# Программисты обычно называют процесс сохранения данных в файле записью данных в файл. Термин "файл вывода"
# используется для файла, в который данные сохраняются. Он имеет такое название, потому что программа помещает в него
# выходные данные. Процесс извлечения данных из файла называется чтением данных из файла. Когда порция данных
# считывается из файла, она копируется из файла в ОЗУ, где на нее ссылается переменная. Термин "файл ввода" используется
# для файла, из которого данные считываются. Он называется так потому, что программа извлекает входные данные из этого
# файла.
# Когда в программе используется файл, всегда требуется выполнить три шага.
# 1. Открыть файл. В процессе открытия файла создается связь между файлом и программой. Открытие файла вывода обычно
# создает файл на диске и позволяет программе записать в него данные. Открытие файла ввода позволяет программе прочитать
# данные из файла.
# 2. Обработать файл. На этом шаге данные либо записываются в файл (если это файл вывода), либо считываются из файла
# (если это файл ввода).
# 3. Закрыть файл. Когда программа закончила использовать файл, его нужно закрыть. Эта операция разрывает связь файла с
# программой.

# Типы файлов.
# Существует два типа файлов: текстовые и двоичные. Текстовый файл содержит данные, которые были закодированы в виде
# текста при помощи такой схемы кодирования, как ASCII или Юникод. Даже если файл содержит числа, они в файле хранятся
# как набор символов. В результате файл можно открыть и просмотреть в текстовом редакторе, таком как Блокнот. Двоичный
# файл содержит данные, которые не были преобразованы в текст. Данные, которые помещены в двоичный файл, предназначены
# только для чтения программой, и значит, такой файл невозможно просмотреть в текстовом редакторе.

# Методы доступа к файлам.
# Большинство языков программирования обеспечивает два разных способа получения доступа к данным, хранящимся в файле:
# последовательный доступ и прямой доступ. Во время работы с файлом с последовательным доступом происходит
# последовательное обращение к данным, с самого начала файла и до его конца. Если требуется прочитать порцию данных,
# которая размещена в конце файла, придется прочитать все данные, которые идут передней, — перескочить непосредственно к
# нужным данным не получится.
# Во время работы с файлом с прямым доступом (который также называется файлом с произвольным доступом) можно
# непосредственно перескочить к любой порции данных в файле, не читая данные, которые идут перед ней. Это подобно тому,
# как работает проигрыватель компакт-дисков или MP3-плеер. Можно прямиком перескочить к любой песне, которую нужно
# прослушать.

# Имена файлов и файловые объекты.
# Для того чтобы программа работала с файлом, находящимся на диске компьютера, она должна создать в оперативной памяти
# файловый объект. Файловый объект — это программный объект, который связан с определенным файлом и предоставляет
# программе методы для работы с этим файлом. В программе на файловый объект ссылается переменная.
# Она используется для осуществления любых операций, которые выполняются с файлом.

# Открытие файла.
# В Python функция open применяется для открытия файла. Она создает файловый объект и связывает его с файлом на диске.
# Вот общий формат применения функции open:
# файловая_переменная = open(имя_файла, режим)
# Здесь файловая_переменная — это имя переменной, которая ссылается на файловый объект; имя_файла — это строковый
# литерал, задающий имя файла; режим — это строковый литерал, задающий режим доступа (чтение, запись и т. д.), в котором
# файл будет открыт.
# Некоторые режимы доступа к файлам в Python
# Режим Описание
# 'r'   Открыть файл только для чтения. Файл не может быть изменен, в него нельзя записать
# 'w'   Открыть файл для записи. Если файл существует, то стереть содержимое. Если файл не существует, то создать
# 'a'   Открыть файл, в который будет выполнена запись. Все записываемые в файл данные будут добавлены в его конец.
#       Если файл не существует, то создать его
# Например, предположим, что файл customers.txt содержит данные о клиентах, и мы хотим его открыть для чтения. Вот
# пример вызова функции open:
# customer_file = open('customers.txt', 'r')
# Напомним, что при использовании режима 'w' на диске создается файл. Если при открытии файла с указанным именем он уже
# существует, то содержимое существующего файла будет удалено.

# Указание места расположения файла.
# Когда в функцию open передается имя файла, которое в качестве аргумента не содержит путь, интерпретатор Python исходит
# из предположения, что место расположения файла такое же, что и у программы. Например, предположим, что программа
# расположена на компьютере, работающем под управлением Windows, в папке C:\Users\Documents\Python. Если программа
# выполняется, и она исполняет инструкцию:
# test_file = open('test.txt', 'w')
# то файл test.txt создается в той же папке. Если требуется открыть файл в другом месте расположения, можно указать путь
# и имя файла в аргументе, который передается в функцию open. Если указать путь в строковом литерале (в особенности на
# компьютере под управлением Windows), следует снабдить строковый литерал префиксом в виде буквы r. Вот пример:
# test_file = open(r'C:\Users\temp\test.txt', 'w')
# Эта инструкция создает файл test.txt в папке C:\Users\temp. Префикс r указывает на то, что строковый литерал является
# неформатированным. В результате этого интерпретатор Python рассматривает символы обратной косой черты как обычные
# символы. Без префикса r интерпретатор предположит, что символы обратной косой черты являются частью экранированных
# последовательностей, и произойдет ошибка.
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
#
